{"version":3,"sources":["../../src/config/abis.ts","../../src/config/contracts.ts","../../src/services/MerchantService.ts","../../src/services/SubscriptionService.ts","../../src/services/TokenService.ts","../../src/services/NFTService.ts","../../src/services/EventMonitoringService.ts","../../src/services/AnalyticsService.ts","../../src/config/constants.ts","../../src/services/AdminService.ts","../../src/services/ReactiveNetworkService.ts","../../src/types/index.ts","../../src/config/chains.ts","../../src/core/SubscriptionSDK.ts","../../src/hooks/useSubscriptionSDK.ts","../../src/hooks/useSubscription.ts","../../src/hooks/useMerchant.ts","../../src/hooks/useSubscriptionEvents.ts"],"names":["getContract","formatEther","zeroAddress","amountInWei","decodeEventLog","parseEther","useState","useEffect","useCallback"],"mappings":"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","file":"index.mjs","sourcesContent":["// Auto-generated ABIs from contract artifacts\n\nexport const subscriptionManagerABI = [\n  {\n    \"type\": \"constructor\",\n    \"inputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getMerchantBalance\",\n    \"inputs\": [\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"token\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getMerchantPlan\",\n    \"inputs\": [\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct ISubscriptionTypes.MerchantPlan\",\n        \"components\": [\n          {\n            \"name\": \"payoutAddress\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"subscriptionPeriod\",\n            \"type\": \"uint64\",\n            \"internalType\": \"uint64\"\n          },\n          {\n            \"name\": \"gracePeriod\",\n            \"type\": \"uint64\",\n            \"internalType\": \"uint64\"\n          },\n          {\n            \"name\": \"isActive\",\n            \"type\": \"bool\",\n            \"internalType\": \"bool\"\n          },\n          {\n            \"name\": \"totalSubscribers\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          }\n        ]\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getMerchantPrice\",\n    \"inputs\": [\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"token\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isMerchantTokenAccepted\",\n    \"inputs\": [\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"token\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"owner\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"platformFeeBps\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint16\",\n        \"internalType\": \"uint16\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"registerMerchant\",\n    \"inputs\": [\n      {\n        \"name\": \"payoutAddress\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"subscriptionPeriod\",\n        \"type\": \"uint64\",\n        \"internalType\": \"uint64\"\n      },\n      {\n        \"name\": \"gracePeriod\",\n        \"type\": \"uint64\",\n        \"internalType\": \"uint64\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"renounceOwnership\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"setMerchantPrice\",\n    \"inputs\": [\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"paymentToken\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"price\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"setPlatformFee\",\n    \"inputs\": [\n      {\n        \"name\": \"_feeBps\",\n        \"type\": \"uint16\",\n        \"internalType\": \"uint16\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"setSubscriptionNFT\",\n    \"inputs\": [\n      {\n        \"name\": \"_nft\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"subscribe\",\n    \"inputs\": [\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"paymentToken\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"subscriptionNFT\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"transferOwnership\",\n    \"inputs\": [\n      {\n        \"name\": \"newOwner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"updateMerchantPlan\",\n    \"inputs\": [\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"payoutAddress\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"subscriptionPeriod\",\n        \"type\": \"uint64\",\n        \"internalType\": \"uint64\"\n      },\n      {\n        \"name\": \"isActive\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"withdrawMerchantBalance\",\n    \"inputs\": [\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"token\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"withdrawPlatformFees\",\n    \"inputs\": [\n      {\n        \"name\": \"token\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"MerchantRegistered\",\n    \"inputs\": [\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"indexed\": true,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"payoutAddress\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"MerchantWithdrawal\",\n    \"inputs\": [\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"indexed\": true,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"token\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"OwnershipTransferred\",\n    \"inputs\": [\n      {\n        \"name\": \"previousOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"newOwner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"PaymentReceived\",\n    \"inputs\": [\n      {\n        \"name\": \"user\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"indexed\": true,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"paymentToken\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"platformFee\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"period\",\n        \"type\": \"uint64\",\n        \"indexed\": false,\n        \"internalType\": \"uint64\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"PlatformFeeWithdrawal\",\n    \"inputs\": [\n      {\n        \"name\": \"token\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"OwnableInvalidOwner\",\n    \"inputs\": [\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"OwnableUnauthorizedAccount\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ReentrancyGuardReentrantCall\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"SafeERC20FailedOperation\",\n    \"inputs\": [\n      {\n        \"name\": \"token\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  }\n] as const;\n\nexport const subscriptionNFTABI = [\n  {\n    \"type\": \"constructor\",\n    \"inputs\": [\n      {\n        \"name\": \"uri\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"_manager\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"_callbackSender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"receive\",\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"DEFAULT_ADMIN_ROLE\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"MANAGER_ROLE\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"REACTIVE_ROLE\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"balanceOf\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"id\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"balanceOfBatch\",\n    \"inputs\": [\n      {\n        \"name\": \"accounts\",\n        \"type\": \"address[]\",\n        \"internalType\": \"address[]\"\n      },\n      {\n        \"name\": \"ids\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"burnExpired\",\n    \"inputs\": [\n      {\n        \"name\": \"user\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"coverDebt\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getRemainingTime\",\n    \"inputs\": [\n      {\n        \"name\": \"user\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getRoleAdmin\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getSubscriptionStatus\",\n    \"inputs\": [\n      {\n        \"name\": \"user\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct ISubscriptionTypes.SubscriptionStatus\",\n        \"components\": [\n          {\n            \"name\": \"expiresAt\",\n            \"type\": \"uint64\",\n            \"internalType\": \"uint64\"\n          },\n          {\n            \"name\": \"startedAt\",\n            \"type\": \"uint64\",\n            \"internalType\": \"uint64\"\n          },\n          {\n            \"name\": \"renewalCount\",\n            \"type\": \"uint32\",\n            \"internalType\": \"uint32\"\n          },\n          {\n            \"name\": \"lastPaymentAmount\",\n            \"type\": \"uint128\",\n            \"internalType\": \"uint128\"\n          },\n          {\n            \"name\": \"paymentToken\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"autoRenew\",\n            \"type\": \"bool\",\n            \"internalType\": \"bool\"\n          }\n        ]\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"grantRole\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"hasRole\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isApprovedForAll\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"operator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isInGracePeriod\",\n    \"inputs\": [\n      {\n        \"name\": \"user\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"isSubscriptionActive\",\n    \"inputs\": [\n      {\n        \"name\": \"user\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"mintOrRenew\",\n    \"inputs\": [\n      {\n        \"name\": \"user\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"additionalPeriod\",\n        \"type\": \"uint64\",\n        \"internalType\": \"uint64\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"onPaymentProcessed\",\n    \"inputs\": [\n      {\n        \"name\": \"user\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"expiresAt\",\n        \"type\": \"uint64\",\n        \"internalType\": \"uint64\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"pay\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"pay\",\n    \"inputs\": [\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"processBatchExpiry\",\n    \"inputs\": [\n      {\n        \"name\": \"users\",\n        \"type\": \"address[]\",\n        \"internalType\": \"address[]\"\n      },\n      {\n        \"name\": \"merchantIds\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"reactiveContract\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"renounceRole\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"callerConfirmation\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"revokeRole\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"safeBatchTransferFrom\",\n    \"inputs\": [\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"ids\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"values\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"safeTransferFrom\",\n    \"inputs\": [\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"id\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"setApprovalForAll\",\n    \"inputs\": [\n      {\n        \"name\": \"operator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"approved\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"setMerchantGracePeriod\",\n    \"inputs\": [\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"gracePeriod\",\n        \"type\": \"uint64\",\n        \"internalType\": \"uint64\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"setReactiveContract\",\n    \"inputs\": [\n      {\n        \"name\": \"_reactive\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"subscriptionManager\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"supportsInterface\",\n    \"inputs\": [\n      {\n        \"name\": \"interfaceId\",\n        \"type\": \"bytes4\",\n        \"internalType\": \"bytes4\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"uri\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"ApprovalForAll\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"operator\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"approved\",\n        \"type\": \"bool\",\n        \"indexed\": false,\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"RoleAdminChanged\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"previousAdminRole\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"newAdminRole\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"RoleGranted\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"RoleRevoked\",\n    \"inputs\": [\n      {\n        \"name\": \"role\",\n        \"type\": \"bytes32\",\n        \"indexed\": true,\n        \"internalType\": \"bytes32\"\n      },\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SubscriptionBurned\",\n    \"inputs\": [\n      {\n        \"name\": \"user\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"indexed\": true,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SubscriptionExpired\",\n    \"inputs\": [\n      {\n        \"name\": \"user\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"indexed\": true,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SubscriptionMinted\",\n    \"inputs\": [\n      {\n        \"name\": \"user\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"indexed\": true,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"expiresAt\",\n        \"type\": \"uint64\",\n        \"indexed\": false,\n        \"internalType\": \"uint64\"\n      },\n      {\n        \"name\": \"renewalCount\",\n        \"type\": \"uint32\",\n        \"indexed\": false,\n        \"internalType\": \"uint32\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SubscriptionRenewed\",\n    \"inputs\": [\n      {\n        \"name\": \"user\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"indexed\": true,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"newExpiresAt\",\n        \"type\": \"uint64\",\n        \"indexed\": false,\n        \"internalType\": \"uint64\"\n      },\n      {\n        \"name\": \"renewalCount\",\n        \"type\": \"uint32\",\n        \"indexed\": false,\n        \"internalType\": \"uint32\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"TransferBatch\",\n    \"inputs\": [\n      {\n        \"name\": \"operator\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"ids\",\n        \"type\": \"uint256[]\",\n        \"indexed\": false,\n        \"internalType\": \"uint256[]\"\n      },\n      {\n        \"name\": \"values\",\n        \"type\": \"uint256[]\",\n        \"indexed\": false,\n        \"internalType\": \"uint256[]\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"TransferSingle\",\n    \"inputs\": [\n      {\n        \"name\": \"operator\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"id\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"URI\",\n    \"inputs\": [\n      {\n        \"name\": \"value\",\n        \"type\": \"string\",\n        \"indexed\": false,\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"id\",\n        \"type\": \"uint256\",\n        \"indexed\": true,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"AccessControlBadConfirmation\",\n    \"inputs\": []\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"AccessControlUnauthorizedAccount\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"neededRole\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1155InsufficientBalance\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"balance\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"needed\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1155InvalidApprover\",\n    \"inputs\": [\n      {\n        \"name\": \"approver\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1155InvalidArrayLength\",\n    \"inputs\": [\n      {\n        \"name\": \"idsLength\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"valuesLength\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1155InvalidOperator\",\n    \"inputs\": [\n      {\n        \"name\": \"operator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1155InvalidReceiver\",\n    \"inputs\": [\n      {\n        \"name\": \"receiver\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1155InvalidSender\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC1155MissingApprovalForAll\",\n    \"inputs\": [\n      {\n        \"name\": \"operator\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ReentrancyGuardReentrantCall\",\n    \"inputs\": []\n  }\n] as const;\n\nexport const subscriptionReactiveABI = [\n  {\n    \"type\": \"receive\",\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"coverDebt\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"depositForOperations\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"payable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"emergencyWithdraw\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getDebt\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getExpiringSubscriptions\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint64\",\n        \"internalType\": \"uint64\"\n      },\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"users\",\n        \"type\": \"address[]\",\n        \"internalType\": \"address[]\"\n      },\n      {\n        \"name\": \"merchantIds\",\n        \"type\": \"uint256[]\",\n        \"internalType\": \"uint256[]\"\n      }\n    ],\n    \"stateMutability\": \"pure\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"getTrackedExpiration\",\n    \"inputs\": [\n      {\n        \"name\": \"user\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint64\",\n        \"internalType\": \"uint64\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"initialize\",\n    \"inputs\": [\n      {\n        \"name\": \"subscriptionManager\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"subscriptionNFT\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"destinationChainId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"pause\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"pay\",\n    \"inputs\": [\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"react\",\n    \"inputs\": [\n      {\n        \"name\": \"log\",\n        \"type\": \"tuple\",\n        \"internalType\": \"struct IReactive.LogRecord\",\n        \"components\": [\n          {\n            \"name\": \"chain_id\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"_contract\",\n            \"type\": \"address\",\n            \"internalType\": \"address\"\n          },\n          {\n            \"name\": \"topic_0\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"topic_1\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"topic_2\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"topic_3\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"data\",\n            \"type\": \"bytes\",\n            \"internalType\": \"bytes\"\n          },\n          {\n            \"name\": \"block_number\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"op_code\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"block_hash\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"tx_hash\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          },\n          {\n            \"name\": \"log_index\",\n            \"type\": \"uint256\",\n            \"internalType\": \"uint256\"\n          }\n        ]\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"resume\",\n    \"inputs\": [],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"subscribeToCron\",\n    \"inputs\": [\n      {\n        \"name\": \"interval\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"subscribeToPaymentEvents\",\n    \"inputs\": [\n      {\n        \"name\": \"chainId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"contractAddress\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"updateCallbackGasLimit\",\n    \"inputs\": [\n      {\n        \"name\": \"newLimit\",\n        \"type\": \"uint64\",\n        \"internalType\": \"uint64\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"updateSubscriptionState\",\n    \"inputs\": [\n      {\n        \"name\": \"user\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"merchantId\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"expiresAt\",\n        \"type\": \"uint64\",\n        \"internalType\": \"uint64\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Callback\",\n    \"inputs\": [\n      {\n        \"name\": \"chain_id\",\n        \"type\": \"uint256\",\n        \"indexed\": true,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"_contract\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"gas_limit\",\n        \"type\": \"uint64\",\n        \"indexed\": true,\n        \"internalType\": \"uint64\"\n      },\n      {\n        \"name\": \"payload\",\n        \"type\": \"bytes\",\n        \"indexed\": false,\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"anonymous\": false\n  }\n] as const;\n\nexport const mockERC20ABI = [\n  {\n    \"type\": \"constructor\",\n    \"inputs\": [\n      {\n        \"name\": \"name\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"symbol\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      },\n      {\n        \"name\": \"decimals_\",\n        \"type\": \"uint8\",\n        \"internalType\": \"uint8\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"allowance\",\n    \"inputs\": [\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"spender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"approve\",\n    \"inputs\": [\n      {\n        \"name\": \"spender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"balanceOf\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"burn\",\n    \"inputs\": [\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"decimals\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint8\",\n        \"internalType\": \"uint8\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"mint\",\n    \"inputs\": [\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"name\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"symbol\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\",\n        \"internalType\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"totalSupply\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"transfer\",\n    \"inputs\": [\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"transferFrom\",\n    \"inputs\": [\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Approval\",\n    \"inputs\": [\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"spender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Transfer\",\n    \"inputs\": [\n      {\n        \"name\": \"from\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC20InsufficientAllowance\",\n    \"inputs\": [\n      {\n        \"name\": \"spender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"allowance\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"needed\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC20InsufficientBalance\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"balance\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"needed\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC20InvalidApprover\",\n    \"inputs\": [\n      {\n        \"name\": \"approver\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC20InvalidReceiver\",\n    \"inputs\": [\n      {\n        \"name\": \"receiver\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC20InvalidSender\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  },\n  {\n    \"type\": \"error\",\n    \"name\": \"ERC20InvalidSpender\",\n    \"inputs\": [\n      {\n        \"name\": \"spender\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ]\n  }\n] as const;\n\n","export const CONTRACT_ADDRESSES = {\n  sepolia: {\n    subscriptionManager: '0x82b069578ae3dA9ea740D24934334208b83E530E' as const,\n    subscriptionNFT: '0x404cb817FA393D3689D1405DB0B76a20eDE72d43' as const,\n    testToken: '0x10586EBF2Ce1F3e851a8F15659cBa15b03Eb8B8A' as const,\n  },\n  reactive: {\n    subscriptionReactive: '0xa55B7A74D05b5D5C48E431e44Fea83a1047A7582' as const,\n  },\n} as const;\n\nexport const CHAIN_IDS = {\n  sepolia: 11155111,\n  reactive: 5318008,\n} as const;\n\nexport const MERCHANT_ID = 1; // Default merchant ID for testing","import { \n  getContract, \n  type Address, \n  type PublicClient, \n  type WalletClient,\n  parseEther,\n  formatEther,\n  type Hash,\n  decodeEventLog\n} from 'viem';\nimport { subscriptionManagerABI } from '@/config/abis';\nimport { CONTRACT_ADDRESSES } from '@/config/contracts';\n\nexport interface MerchantPlan {\n  payoutAddress: Address;\n  subscriptionPeriod: bigint;\n  gracePeriod: bigint;\n  isActive: boolean;\n  totalSubscribers: bigint;\n}\n\nexport interface MerchantBalance {\n  totalReceived: bigint;\n  totalWithdrawn: bigint;\n  pendingAmount: bigint;\n  lastWithdrawal: bigint;\n}\n\nexport interface MerchantConfig {\n  merchantId: bigint;\n  paymentTokens: Address[];\n  prices: bigint[];\n}\n\n/**\n * Service for managing merchant operations\n * Handles merchant registration, plan management, pricing, and withdrawals\n */\nexport class MerchantService {\n  private contract: any;\n  \n  constructor(\n    private publicClient: PublicClient,\n    private walletClient?: WalletClient\n  ) {\n    this.contract = getContract({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n      abi: subscriptionManagerABI,\n      client: { public: this.publicClient, wallet: this.walletClient }\n    });\n  }\n\n  /**\n   * Register a new merchant on the platform (on-chain only)\n   */\n  async registerMerchant(params: {\n    payoutAddress: Address;\n    subscriptionPeriod: number; // in seconds\n    gracePeriod: number; // in seconds\n  }): Promise<{ hash: Hash; merchantId?: bigint }> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    const hash = await this.contract.write.registerMerchant([\n      params.payoutAddress,\n      BigInt(params.subscriptionPeriod),\n      BigInt(params.gracePeriod)\n    ]);\n\n    // Wait for transaction and get merchant ID from events\n    const receipt = await this.publicClient.waitForTransactionReceipt({ hash });\n    const merchantId = this.extractMerchantIdFromReceipt(receipt);\n    \n    return { hash, merchantId };\n  }\n\n  /**\n   * Register merchant with complete profile (on-chain + metadata)\n   * New in v2: Includes off-chain metadata storage\n   */\n  async registerMerchantWithMetadata(params: {\n    // On-chain parameters\n    payoutAddress: Address;\n    subscriptionPeriod: number; // in seconds\n    gracePeriod: number; // in seconds\n    \n    // Off-chain metadata\n    name: string;\n    description?: string;\n    logo?: string; // Base64 encoded image or URL\n    metadataApiUrl?: string; // Optional custom metadata API URL\n  }): Promise<{ hash: Hash; merchantId?: bigint; metadataStored: boolean }> {\n    // Step 1: Register on-chain\n    const { hash, merchantId } = await this.registerMerchant({\n      payoutAddress: params.payoutAddress,\n      subscriptionPeriod: params.subscriptionPeriod,\n      gracePeriod: params.gracePeriod\n    });\n\n    let metadataStored = false;\n\n    // Step 2: Store metadata if merchantId was returned\n    if (merchantId) {\n      try {\n        // Determine the base URL\n        const baseUrl = params.metadataApiUrl || \n          (typeof window !== 'undefined' \n            ? window.location.origin \n            : 'https://nft-sub.vercel.app');\n        \n        const metadataUrl = `${baseUrl}/api/merchant/register`;\n        \n        const response = await fetch(metadataUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            merchantId: merchantId.toString(),\n            name: params.name,\n            description: params.description || '',\n            logo: params.logo || null\n          })\n        });\n\n        metadataStored = response.ok;\n        \n        if (!response.ok) {\n          console.error('Failed to store merchant metadata:', await response.text());\n        }\n      } catch (error) {\n        console.error('Error storing merchant metadata:', error);\n      }\n    }\n\n    return { hash, merchantId, metadataStored };\n  }\n\n  /**\n   * Update existing merchant plan configuration\n   */\n  async updateMerchantPlan(params: {\n    merchantId: bigint;\n    payoutAddress: Address;\n    subscriptionPeriod: number;\n    isActive: boolean;\n  }): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    return await this.contract.write.updateMerchantPlan([\n      params.merchantId,\n      params.payoutAddress,\n      BigInt(params.subscriptionPeriod),\n      params.isActive\n    ]);\n  }\n\n  /**\n   * Set pricing for a specific payment token\n   */\n  async setMerchantPrice(params: {\n    merchantId: bigint;\n    paymentToken: Address;\n    price: string; // Price in token units (will be converted based on decimals)\n    decimals?: number;\n  }): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    const decimals = params.decimals || 18;\n    const priceInWei = parseEther(params.price); // For 18 decimals\n    \n    return await this.contract.write.setMerchantPrice([\n      params.merchantId,\n      params.paymentToken,\n      priceInWei\n    ]);\n  }\n\n  /**\n   * Set multiple token prices at once\n   */\n  async setBulkPrices(params: {\n    merchantId: bigint;\n    tokens: Array<{\n      address: Address;\n      price: string;\n      decimals?: number;\n    }>;\n  }): Promise<Hash[]> {\n    const hashes: Hash[] = [];\n    \n    for (const token of params.tokens) {\n      const hash = await this.setMerchantPrice({\n        merchantId: params.merchantId,\n        paymentToken: token.address,\n        price: token.price,\n        decimals: token.decimals\n      });\n      hashes.push(hash);\n    }\n    \n    return hashes;\n  }\n\n  /**\n   * Get merchant plan details\n   */\n  async getMerchantPlan(merchantId: bigint): Promise<MerchantPlan> {\n    const plan = await this.contract.read.getMerchantPlan([merchantId]);\n    return {\n      payoutAddress: plan.payoutAddress,\n      subscriptionPeriod: plan.subscriptionPeriod,\n      gracePeriod: plan.gracePeriod,\n      isActive: plan.isActive,\n      totalSubscribers: plan.totalSubscribers\n    };\n  }\n\n  /**\n   * Get merchant balance for a specific token\n   */\n  async getMerchantBalance(\n    merchantId: bigint,\n    token: Address\n  ): Promise<bigint> {\n    return await this.contract.read.getMerchantBalance([merchantId, token]);\n  }\n\n  /**\n   * Get all balances for a merchant across multiple tokens\n   */\n  async getAllMerchantBalances(\n    merchantId: bigint,\n    tokens: Address[]\n  ): Promise<Map<Address, bigint>> {\n    const balances = new Map<Address, bigint>();\n    \n    for (const token of tokens) {\n      const balance = await this.getMerchantBalance(merchantId, token);\n      if (balance > 0n) {\n        balances.set(token, balance);\n      }\n    }\n    \n    return balances;\n  }\n\n  /**\n   * Withdraw merchant balance for a specific token\n   */\n  async withdrawMerchantBalance(params: {\n    merchantId: bigint;\n    token: Address;\n  }): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    return await this.contract.write.withdrawMerchantBalance([\n      params.merchantId,\n      params.token\n    ]);\n  }\n\n  /**\n   * Withdraw all available balances for a merchant\n   */\n  async withdrawAllBalances(\n    merchantId: bigint,\n    tokens: Address[]\n  ): Promise<Hash[]> {\n    const hashes: Hash[] = [];\n    const balances = await this.getAllMerchantBalances(merchantId, tokens);\n    \n    for (const [token, balance] of balances) {\n      if (balance > 0n) {\n        const hash = await this.withdrawMerchantBalance({\n          merchantId,\n          token\n        });\n        hashes.push(hash);\n      }\n    }\n    \n    return hashes;\n  }\n\n  /**\n   * Get merchant price for a specific token\n   */\n  async getMerchantPrice(\n    merchantId: bigint,\n    token: Address\n  ): Promise<bigint> {\n    return await this.contract.read.getMerchantPrice([merchantId, token]);\n  }\n\n  /**\n   * Check if a merchant accepts a specific token\n   */\n  async isMerchantTokenAccepted(\n    merchantId: bigint,\n    token: Address\n  ): Promise<boolean> {\n    return await this.contract.read.isMerchantTokenAccepted([merchantId, token]);\n  }\n\n  /**\n   * Get all accepted tokens and their prices for a merchant\n   */\n  async getMerchantTokenPrices(\n    merchantId: bigint,\n    possibleTokens: Address[]\n  ): Promise<Map<Address, bigint>> {\n    const prices = new Map<Address, bigint>();\n    \n    for (const token of possibleTokens) {\n      const isAccepted = await this.isMerchantTokenAccepted(merchantId, token);\n      if (isAccepted) {\n        const price = await this.getMerchantPrice(merchantId, token);\n        prices.set(token, price);\n      }\n    }\n    \n    return prices;\n  }\n\n  /**\n   * Listen to merchant registration events\n   */\n  watchMerchantRegistrations(\n    callback: (merchantId: bigint, owner: Address, payoutAddress: Address) => void\n  ) {\n    return this.publicClient.watchContractEvent({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n      abi: subscriptionManagerABI,\n      eventName: 'MerchantRegistered',\n      onLogs: (logs) => {\n        logs.forEach((log) => {\n          const { merchantId, owner, payoutAddress } = log.args as any;\n          callback(merchantId, owner, payoutAddress);\n        });\n      }\n    });\n  }\n\n  /**\n   * Listen to merchant withdrawal events\n   */\n  watchMerchantWithdrawals(\n    merchantId?: bigint,\n    callback?: (data: {\n      merchantId: bigint;\n      token: Address;\n      amount: bigint;\n      payoutAddress: Address;\n    }) => void\n  ) {\n    return this.publicClient.watchContractEvent({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n      abi: subscriptionManagerABI,\n      eventName: 'MerchantWithdrawal',\n      onLogs: (logs) => {\n        logs.forEach((log) => {\n          const args = log.args as any;\n          if (!merchantId || args.merchantId === merchantId) {\n            callback?.({\n              merchantId: args.merchantId,\n              token: args.token,\n              amount: args.amount,\n              payoutAddress: args.payoutAddress\n            });\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Get historical merchant events\n   */\n  async getMerchantHistory(merchantId: bigint) {\n    const registrationLogs = await this.publicClient.getContractEvents({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n      abi: subscriptionManagerABI,\n      eventName: 'MerchantRegistered',\n      fromBlock: 'earliest',\n      args: { merchantId }\n    });\n\n    const withdrawalLogs = await this.publicClient.getContractEvents({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n      abi: subscriptionManagerABI,\n      eventName: 'MerchantWithdrawal',\n      fromBlock: 'earliest',\n      args: { merchantId }\n    });\n\n    return {\n      registrations: registrationLogs,\n      withdrawals: withdrawalLogs\n    };\n  }\n\n  /**\n   * Get merchant metadata (off-chain data)\n   * New in v2\n   */\n  async getMerchantMetadata(\n    merchantId: bigint,\n    metadataApiUrl?: string\n  ): Promise<{\n    merchantId: string;\n    name: string;\n    description: string;\n    logo: string | null;\n    createdAt?: string;\n    updatedAt?: string;\n  } | null> {\n    try {\n      // Determine the base URL\n      const baseUrl = metadataApiUrl || \n        (typeof window !== 'undefined' \n          ? window.location.origin \n          : 'https://nft-sub.vercel.app');\n      \n      const url = `${baseUrl}/api/merchant/register?merchantId=${merchantId}`;\n      const response = await fetch(url);\n      \n      if (!response.ok) {\n        return null;\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching merchant metadata:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Update merchant metadata (off-chain data only)\n   * New in v2\n   */\n  async updateMerchantMetadata(params: {\n    merchantId: bigint;\n    name: string;\n    description?: string;\n    logo?: string; // Base64 encoded image\n    metadataApiUrl?: string;\n  }): Promise<boolean> {\n    try {\n      // Determine the base URL\n      const baseUrl = params.metadataApiUrl || \n        (typeof window !== 'undefined' \n          ? window.location.origin \n          : 'https://nft-sub.vercel.app');\n      \n      const url = `${baseUrl}/api/merchant/register`;\n      \n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          merchantId: params.merchantId.toString(),\n          name: params.name,\n          description: params.description || '',\n          logo: params.logo || null\n        })\n      });\n\n      return response.ok;\n    } catch (error) {\n      console.error('Error updating merchant metadata:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get complete merchant information (on-chain + metadata)\n   * New in v2\n   */\n  async getMerchantComplete(merchantId: bigint): Promise<{\n    onChain: MerchantPlan | null;\n    metadata: any | null;\n  }> {\n    const [onChain, metadata] = await Promise.all([\n      this.getMerchantPlan(merchantId).catch(() => null),\n      this.getMerchantMetadata(merchantId)\n    ]);\n\n    return { onChain, metadata };\n  }\n\n  /**\n   * Extract merchant ID from transaction receipt\n   */\n  private extractMerchantIdFromReceipt(receipt: any): bigint | undefined {\n    const merchantRegisteredEvent = receipt.logs.find(\n      (log: any) => {\n        try {\n          const decoded = decodeEventLog({\n            abi: subscriptionManagerABI,\n            data: log.data,\n            topics: log.topics\n          });\n          return decoded.eventName === 'MerchantRegistered';\n        } catch {\n          return false;\n        }\n      }\n    );\n\n    if (merchantRegisteredEvent) {\n      const decoded = decodeEventLog({\n        abi: subscriptionManagerABI,\n        data: merchantRegisteredEvent.data,\n        topics: merchantRegisteredEvent.topics\n      });\n      return (decoded.args as any).merchantId;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Format price for display\n   */\n  formatPrice(price: bigint, decimals: number = 18): string {\n    return formatEther(price);\n  }\n\n  /**\n   * Calculate estimated revenue\n   */\n  calculateEstimatedRevenue(params: {\n    price: bigint;\n    subscribers: number;\n    platformFeeBps: number;\n  }): bigint {\n    const totalRevenue = params.price * BigInt(params.subscribers);\n    const platformFee = (totalRevenue * BigInt(params.platformFeeBps)) / 10000n;\n    return totalRevenue - platformFee;\n  }\n\n  /**\n   * Check if an address is a registered merchant\n   */\n  async isMerchant(address: Address): Promise<boolean> {\n    try {\n      // Simplified check - try to get merchant 1 and check if address matches\n      const plan = await this.getMerchantPlan(1n);\n      return plan.payoutAddress.toLowerCase() === address.toLowerCase();\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get total number of merchants registered\n   */\n  async getMerchantCount(): Promise<bigint> {\n    // Simplified implementation - count by checking existing merchants\n    let count = 0n;\n    for (let i = 1n; i <= 10n; i++) {\n      try {\n        await this.getMerchantPlan(i);\n        count = i;\n      } catch {\n        break;\n      }\n    }\n    return count;\n  }\n}","import {\n  getContract,\n  type Address,\n  type PublicClient,\n  type WalletClient,\n  type Hash,\n  parseEther,\n  formatEther,\n  zeroAddress\n} from 'viem';\nimport { subscriptionManagerABI, subscriptionNFTABI } from '@/config/abis';\nimport { CONTRACT_ADDRESSES, MERCHANT_ID } from '@/config/contracts';\n\nexport interface SubscriptionStatus {\n  isActive: boolean;\n  expiresAt: bigint;\n  renewalCount: bigint;\n  lastRenewal: bigint;\n  merchantId: bigint;\n}\n\nexport interface PaymentOption {\n  token: Address;\n  price: bigint;\n  symbol: string;\n  decimals: number;\n}\n\nexport interface SubscriptionPlan {\n  merchantId: bigint;\n  period: bigint;\n  gracePeriod: bigint;\n  paymentOptions: PaymentOption[];\n}\n\n/**\n * Service for managing user subscriptions\n * Handles subscription purchases, renewals, status checks, and subscription management\n */\nexport class SubscriptionService {\n  private managerContract: any;\n  private nftContract: any;\n\n  constructor(\n    private publicClient: PublicClient,\n    private walletClient?: WalletClient\n  ) {\n    this.managerContract = getContract({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n      abi: subscriptionManagerABI,\n      client: { public: this.publicClient, wallet: this.walletClient }\n    });\n\n    this.nftContract = getContract({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n      abi: subscriptionNFTABI,\n      client: { public: this.publicClient, wallet: this.walletClient }\n    });\n  }\n\n  /**\n   * Subscribe to a merchant plan\n   */\n  async subscribe(params: {\n    merchantId: bigint;\n    paymentToken: Address;\n    value?: bigint; // For ETH payments\n  }): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n\n    const isETH = params.paymentToken === zeroAddress;\n    \n    if (isETH) {\n      // ETH payment\n      const price = await this.getSubscriptionPrice(params.merchantId, params.paymentToken);\n      return await this.managerContract.write.subscribe(\n        [params.merchantId, params.paymentToken],\n        { value: price }\n      );\n    } else {\n      // ERC20 payment - need approval first\n      return await this.managerContract.write.subscribe([\n        params.merchantId,\n        params.paymentToken\n      ]);\n    }\n  }\n\n  /**\n   * Subscribe with automatic token approval\n   */\n  async subscribeWithApproval(params: {\n    merchantId: bigint;\n    paymentToken: Address;\n    tokenContract: any; // ERC20 contract instance\n  }): Promise<{ approvalHash?: Hash; subscriptionHash: Hash }> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n\n    const price = await this.getSubscriptionPrice(params.merchantId, params.paymentToken);\n    \n    // Check current allowance\n    const allowance = await params.tokenContract.read.allowance([\n      this.walletClient.account?.address,\n      CONTRACT_ADDRESSES.sepolia.subscriptionManager\n    ]);\n\n    let approvalHash: Hash | undefined;\n    \n    // Approve if needed\n    if (allowance < price) {\n      approvalHash = await params.tokenContract.write.approve([\n        CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n        price\n      ]);\n      \n      // Wait for approval confirmation\n      await this.publicClient.waitForTransactionReceipt({ hash: approvalHash! });\n    }\n\n    // Subscribe\n    const subscriptionHash = await this.subscribe({\n      merchantId: params.merchantId,\n      paymentToken: params.paymentToken\n    });\n\n    return { approvalHash, subscriptionHash };\n  }\n\n  /**\n   * Get subscription status for a user\n   */\n  async getSubscriptionStatus(\n    user: Address,\n    merchantId: bigint\n  ): Promise<SubscriptionStatus> {\n    const status = await this.nftContract.read.getSubscriptionStatus([user, merchantId]);\n    \n    return {\n      isActive: status.isActive,\n      expiresAt: status.expiresAt,\n      renewalCount: status.renewalCount,\n      lastRenewal: status.lastRenewal,\n      merchantId: status.merchantId\n    };\n  }\n\n  /**\n   * Check if subscription is active\n   */\n  async isSubscriptionActive(\n    user: Address,\n    merchantId: bigint\n  ): Promise<boolean> {\n    return await this.nftContract.read.isSubscriptionActive([user, merchantId]);\n  }\n\n  /**\n   * Get all user subscriptions\n   */\n  async getUserSubscriptions(user: Address): Promise<bigint[]> {\n    return await this.nftContract.read.getUserSubscriptions([user]);\n  }\n\n  /**\n   * Get detailed information for all user subscriptions\n   */\n  async getAllUserSubscriptionDetails(user: Address): Promise<SubscriptionStatus[]> {\n    const merchantIds = await this.getUserSubscriptions(user);\n    const statuses: SubscriptionStatus[] = [];\n\n    for (const merchantId of merchantIds) {\n      const status = await this.getSubscriptionStatus(user, merchantId);\n      statuses.push(status);\n    }\n\n    return statuses;\n  }\n\n  /**\n   * Get subscription price for a merchant and token\n   */\n  async getSubscriptionPrice(\n    merchantId: bigint,\n    paymentToken: Address\n  ): Promise<bigint> {\n    return await this.managerContract.read.getMerchantPrice([merchantId, paymentToken]);\n  }\n\n  /**\n   * Get all payment options for a merchant\n   */\n  async getPaymentOptions(\n    merchantId: bigint,\n    supportedTokens: Array<{ address: Address; symbol: string; decimals: number }>\n  ): Promise<PaymentOption[]> {\n    const options: PaymentOption[] = [];\n\n    for (const token of supportedTokens) {\n      const isAccepted = await this.managerContract.read.isMerchantTokenAccepted([\n        merchantId,\n        token.address\n      ]);\n\n      if (isAccepted) {\n        const price = await this.getSubscriptionPrice(merchantId, token.address);\n        options.push({\n          token: token.address,\n          price,\n          symbol: token.symbol,\n          decimals: token.decimals\n        });\n      }\n    }\n\n    return options;\n  }\n\n  /**\n   * Calculate time remaining for subscription\n   */\n  getTimeRemaining(expiresAt: bigint): {\n    days: number;\n    hours: number;\n    minutes: number;\n    isExpired: boolean;\n  } {\n    const now = BigInt(Math.floor(Date.now() / 1000));\n    const remaining = Number(expiresAt - now);\n\n    if (remaining <= 0) {\n      return { days: 0, hours: 0, minutes: 0, isExpired: true };\n    }\n\n    const days = Math.floor(remaining / 86400);\n    const hours = Math.floor((remaining % 86400) / 3600);\n    const minutes = Math.floor((remaining % 3600) / 60);\n\n    return { days, hours, minutes, isExpired: false };\n  }\n\n  /**\n   * Get subscription plan details\n   */\n  async getSubscriptionPlan(merchantId: bigint): Promise<{\n    period: bigint;\n    gracePeriod: bigint;\n    isActive: boolean;\n  }> {\n    const plan = await this.managerContract.read.getMerchantPlan([merchantId]);\n    \n    return {\n      period: plan.subscriptionPeriod,\n      gracePeriod: plan.gracePeriod,\n      isActive: plan.isActive\n    };\n  }\n\n  /**\n   * Estimate renewal date\n   */\n  estimateRenewalDate(currentExpiry: bigint, period: bigint): Date {\n    const now = BigInt(Math.floor(Date.now() / 1000));\n    const newExpiry = currentExpiry > now ? currentExpiry + period : now + period;\n    return new Date(Number(newExpiry) * 1000);\n  }\n\n  /**\n   * Watch for payment events\n   */\n  watchPaymentEvents(params: {\n    subscriber?: Address;\n    merchantId?: bigint;\n    callback: (event: {\n      subscriber: Address;\n      merchantId: bigint;\n      paymentToken: Address;\n      amount: bigint;\n      platformFee: bigint;\n      subscriptionPeriod: bigint;\n    }) => void;\n  }) {\n    return this.publicClient.watchContractEvent({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n      abi: subscriptionManagerABI,\n      eventName: 'PaymentReceived' as any,\n      args: {\n        user: params.subscriber,\n        merchantId: params.merchantId\n      } as any,\n      onLogs: (logs) => {\n        logs.forEach((log) => {\n          const args = log.args as any;\n          params.callback({\n            subscriber: args.user,\n            merchantId: args.merchantId,\n            paymentToken: args.paymentToken,\n            amount: args.amount,\n            platformFee: args.platformFee,\n            subscriptionPeriod: args.subscriptionPeriod\n          });\n        });\n      }\n    });\n  }\n\n  /**\n   * Watch for subscription minting events\n   */\n  watchSubscriptionMinted(params: {\n    subscriber?: Address;\n    merchantId?: bigint;\n    callback: (event: {\n      subscriber: Address;\n      merchantId: bigint;\n      expiresAt: bigint;\n    }) => void;\n  }) {\n    return this.publicClient.watchContractEvent({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n      abi: subscriptionNFTABI,\n      eventName: 'SubscriptionMinted' as any,\n      args: {\n        user: params.subscriber,\n        merchantId: params.merchantId\n      } as any,\n      onLogs: (logs) => {\n        logs.forEach((log) => {\n          const args = log.args as any;\n          params.callback({\n            subscriber: args.user,\n            merchantId: args.merchantId,\n            expiresAt: args.expiresAt\n          });\n        });\n      }\n    });\n  }\n\n  /**\n   * Watch for subscription renewal events\n   */\n  watchSubscriptionRenewed(params: {\n    subscriber?: Address;\n    merchantId?: bigint;\n    callback: (event: {\n      subscriber: Address;\n      merchantId: bigint;\n      newExpiresAt: bigint;\n      renewalCount: bigint;\n    }) => void;\n  }) {\n    return this.publicClient.watchContractEvent({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n      abi: subscriptionNFTABI,\n      eventName: 'SubscriptionRenewed' as any,\n      args: {\n        user: params.subscriber,\n        merchantId: params.merchantId\n      } as any,\n      onLogs: (logs) => {\n        logs.forEach((log) => {\n          const args = log.args as any;\n          params.callback({\n            subscriber: args.user,\n            merchantId: args.merchantId,\n            newExpiresAt: args.newExpiresAt,\n            renewalCount: args.renewalCount\n          });\n        });\n      }\n    });\n  }\n\n  /**\n   * Get subscription history for a user\n   */\n  async getSubscriptionHistory(user: Address, merchantId?: bigint) {\n    const mintedLogs = await this.publicClient.getContractEvents({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n      abi: subscriptionNFTABI,\n      eventName: 'SubscriptionMinted' as any,\n      fromBlock: 'earliest',\n      args: { user, merchantId } as any\n    });\n\n    const renewedLogs = await this.publicClient.getContractEvents({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n      abi: subscriptionNFTABI,\n      eventName: 'SubscriptionRenewed' as any,\n      fromBlock: 'earliest',\n      args: { user, merchantId } as any\n    });\n\n    const paymentLogs = await this.publicClient.getContractEvents({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n      abi: subscriptionManagerABI,\n      eventName: 'PaymentReceived' as any,\n      fromBlock: 'earliest',\n      args: { user, merchantId } as any\n    });\n\n    return {\n      minted: mintedLogs,\n      renewed: renewedLogs,\n      payments: paymentLogs\n    };\n  }\n\n  /**\n   * Calculate total spent by user\n   */\n  async calculateTotalSpent(user: Address, merchantId?: bigint): Promise<bigint> {\n    const { payments } = await this.getSubscriptionHistory(user, merchantId);\n    \n    return payments.reduce((total, payment) => {\n      return total + (payment.args as any).amount;\n    }, 0n);\n  }\n\n  /**\n   * Check if user needs to renew soon\n   */\n  async needsRenewalSoon(\n    user: Address,\n    merchantId: bigint,\n    thresholdDays: number = 7\n  ): Promise<boolean> {\n    const status = await this.getSubscriptionStatus(user, merchantId);\n    \n    if (!status.isActive) return false;\n    \n    const timeRemaining = this.getTimeRemaining(status.expiresAt);\n    return timeRemaining.days <= thresholdDays && !timeRemaining.isExpired;\n  }\n\n  /**\n   * Get NFT balance for a user and merchant\n   */\n  async getNFTBalance(user: Address, merchantId: bigint): Promise<bigint> {\n    return await this.nftContract.read.balanceOf([user, merchantId]);\n  }\n\n  /**\n   * Get NFT URI for a subscription\n   */\n  async getNFTUri(tokenId: bigint): Promise<string> {\n    return await this.nftContract.read.uri([tokenId]);\n  }\n\n  /**\n   * Format subscription period for display\n   */\n  formatPeriod(seconds: bigint): string {\n    const days = Number(seconds) / 86400;\n    \n    if (days >= 365) {\n      return `${Math.floor(days / 365)} year${days >= 730 ? 's' : ''}`;\n    } else if (days >= 30) {\n      return `${Math.floor(days / 30)} month${days >= 60 ? 's' : ''}`;\n    } else if (days >= 7) {\n      return `${Math.floor(days / 7)} week${days >= 14 ? 's' : ''}`;\n    } else {\n      return `${days} day${days > 1 ? 's' : ''}`;\n    }\n  }\n\n  /**\n   * Format price for display\n   */\n  formatPrice(price: bigint, decimals: number = 18): string {\n    if (decimals === 18) {\n      return formatEther(price);\n    }\n    // Handle other decimals\n    return (Number(price) / Math.pow(10, decimals)).toFixed(6);\n  }\n}","import {\n  getContract,\n  type Address,\n  type PublicClient,\n  type WalletClient,\n  type Hash,\n  parseUnits,\n  formatUnits,\n  zeroAddress\n} from 'viem';\nimport { mockERC20ABI } from '@/config/abis';\nimport { CONTRACT_ADDRESSES } from '@/config/contracts';\n\nexport interface TokenInfo {\n  address: Address;\n  name: string;\n  symbol: string;\n  decimals: number;\n  totalSupply: bigint;\n}\n\nexport interface TokenBalance {\n  address: Address;\n  symbol: string;\n  decimals: number;\n  balance: bigint;\n  formattedBalance: string;\n}\n\n/**\n * Service for managing ERC20 tokens and test token minting\n * Handles token operations, approvals, minting for testing, and balance management\n */\nexport class TokenService {\n  private tokenContracts: Map<Address, any> = new Map();\n\n  constructor(\n    private publicClient: PublicClient,\n    private walletClient?: WalletClient\n  ) {}\n\n  /**\n   * Get or create token contract instance\n   */\n  private getTokenContract(tokenAddress: Address): any {\n    if (!this.tokenContracts.has(tokenAddress)) {\n      const contract = getContract({\n        address: tokenAddress,\n        abi: mockERC20ABI,\n        client: { public: this.publicClient, wallet: this.walletClient }\n      });\n      this.tokenContracts.set(tokenAddress, contract);\n    }\n    return this.tokenContracts.get(tokenAddress);\n  }\n\n  /**\n   * Get token information\n   */\n  async getTokenInfo(tokenAddress: Address): Promise<TokenInfo> {\n    if (tokenAddress === zeroAddress) {\n      return {\n        address: zeroAddress,\n        name: 'Ethereum',\n        symbol: 'ETH',\n        decimals: 18,\n        totalSupply: 0n // Not applicable for ETH\n      };\n    }\n\n    const contract = this.getTokenContract(tokenAddress);\n    const [name, symbol, decimals, totalSupply] = await Promise.all([\n      contract.read.name(),\n      contract.read.symbol(),\n      contract.read.decimals(),\n      contract.read.totalSupply()\n    ]);\n\n    return {\n      address: tokenAddress,\n      name,\n      symbol,\n      decimals,\n      totalSupply\n    };\n  }\n\n  /**\n   * Get token balance for an address\n   */\n  async getBalance(tokenAddress: Address, userAddress: Address): Promise<bigint> {\n    if (tokenAddress === zeroAddress) {\n      // ETH balance\n      return await this.publicClient.getBalance({ address: userAddress });\n    }\n\n    const contract = this.getTokenContract(tokenAddress);\n    return await contract.read.balanceOf([userAddress]);\n  }\n\n  /**\n   * Get multiple token balances\n   */\n  async getBalances(\n    tokens: Array<{ address: Address; symbol: string; decimals: number }>,\n    userAddress: Address\n  ): Promise<TokenBalance[]> {\n    const balances: TokenBalance[] = [];\n\n    for (const token of tokens) {\n      const balance = await this.getBalance(token.address, userAddress);\n      balances.push({\n        address: token.address,\n        symbol: token.symbol,\n        decimals: token.decimals,\n        balance,\n        formattedBalance: this.formatTokenAmount(balance, token.decimals)\n      });\n    }\n\n    return balances;\n  }\n\n  /**\n   * Approve token spending\n   */\n  async approve(params: {\n    tokenAddress: Address;\n    spender: Address;\n    amount: bigint;\n  }): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    if (params.tokenAddress === zeroAddress) {\n      throw new Error('Cannot approve ETH');\n    }\n\n    const contract = this.getTokenContract(params.tokenAddress);\n    return await contract.write.approve([params.spender, params.amount]);\n  }\n\n  /**\n   * Check token allowance\n   */\n  async getAllowance(params: {\n    tokenAddress: Address;\n    owner: Address;\n    spender: Address;\n  }): Promise<bigint> {\n    if (params.tokenAddress === zeroAddress) {\n      return 0n; // ETH doesn't have allowance\n    }\n\n    const contract = this.getTokenContract(params.tokenAddress);\n    return await contract.read.allowance([params.owner, params.spender]);\n  }\n\n  /**\n   * Approve if needed\n   */\n  async approveIfNeeded(params: {\n    tokenAddress: Address;\n    spender: Address;\n    amount: bigint;\n  }): Promise<{ needed: boolean; hash?: Hash }> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    if (params.tokenAddress === zeroAddress) {\n      return { needed: false };\n    }\n\n    const currentAllowance = await this.getAllowance({\n      tokenAddress: params.tokenAddress,\n      owner: this.walletClient.account!.address,\n      spender: params.spender\n    });\n\n    if (currentAllowance < params.amount) {\n      const hash = await this.approve({\n        tokenAddress: params.tokenAddress,\n        spender: params.spender,\n        amount: params.amount\n      });\n      return { needed: true, hash };\n    }\n\n    return { needed: false };\n  }\n\n  /**\n   * Mint test tokens (only for MockERC20)\n   */\n  async mintTestTokens(params: {\n    tokenAddress: Address;\n    to: Address;\n    amount: string; // Amount in token units\n  }): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n\n    const contract = this.getTokenContract(params.tokenAddress);\n    const decimals = await contract.read.decimals();\n    const amountInWei = parseUnits(params.amount, decimals);\n\n    // Check if contract has mint function (MockERC20)\n    try {\n      return await contract.write.mint([params.to, amountInWei]);\n    } catch (error) {\n      throw new Error('This token does not support minting');\n    }\n  }\n\n  /**\n   * Burn tokens\n   */\n  async burnTokens(params: {\n    tokenAddress: Address;\n    amount: string;\n  }): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n\n    const contract = this.getTokenContract(params.tokenAddress);\n    const decimals = await contract.read.decimals();\n    const amountInWei = parseUnits(params.amount, decimals);\n\n    try {\n      return await contract.write.burn([amountInWei]);\n    } catch (error) {\n      throw new Error('This token does not support burning');\n    }\n  }\n\n  /**\n   * Transfer tokens\n   */\n  async transfer(params: {\n    tokenAddress: Address;\n    to: Address;\n    amount: string;\n  }): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n\n    if (params.tokenAddress === zeroAddress) {\n      // ETH transfer\n      const amountInWei = parseUnits(params.amount, 18);\n      return await this.walletClient.sendTransaction({\n        account: this.walletClient.account!,\n        to: params.to,\n        value: amountInWei,\n        chain: this.walletClient.chain // fix: add required 'chain' property\n      });\n    }\n\n    const contract = this.getTokenContract(params.tokenAddress);\n    const decimals = await contract.read.decimals();\n    const amountInWei = parseUnits(params.amount, decimals);\n\n    return await contract.write.transfer([params.to, amountInWei]);\n  }\n\n  /**\n   * Get faucet tokens for testing\n   */\n  async getFaucetTokens(userAddress: Address): Promise<{\n    tokenAddress: Address;\n    amount: bigint;\n    hash: Hash;\n  }> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n\n    // Mint 1000 test tokens\n    const amount = '1000';\n    const hash = await this.mintTestTokens({\n      tokenAddress: CONTRACT_ADDRESSES.sepolia.testToken,\n      to: userAddress,\n      amount\n    });\n\n    return {\n      tokenAddress: CONTRACT_ADDRESSES.sepolia.testToken,\n      amount: parseUnits(amount, 18),\n      hash\n    };\n  }\n\n  /**\n   * Watch token transfers\n   */\n  watchTransfers(params: {\n    tokenAddress: Address;\n    from?: Address;\n    to?: Address;\n    callback: (event: {\n      from: Address;\n      to: Address;\n      value: bigint;\n    }) => void;\n  }) {\n    const contract = this.getTokenContract(params.tokenAddress);\n\n    return this.publicClient.watchContractEvent({\n      address: params.tokenAddress,\n      abi: mockERC20ABI,\n      eventName: 'Transfer',\n      args: {\n        from: params.from,\n        to: params.to\n      },\n      onLogs: (logs) => {\n        logs.forEach((log) => {\n          const args = log.args as any;\n          params.callback({\n            from: args.from,\n            to: args.to,\n            value: args.value\n          });\n        });\n      }\n    });\n  }\n\n  /**\n   * Watch approvals\n   */\n  watchApprovals(params: {\n    tokenAddress: Address;\n    owner?: Address;\n    spender?: Address;\n    callback: (event: {\n      owner: Address;\n      spender: Address;\n      value: bigint;\n    }) => void;\n  }) {\n    return this.publicClient.watchContractEvent({\n      address: params.tokenAddress,\n      abi: mockERC20ABI,\n      eventName: 'Approval',\n      args: {\n        owner: params.owner,\n        spender: params.spender\n      },\n      onLogs: (logs) => {\n        logs.forEach((log) => {\n          const args = log.args as any;\n          params.callback({\n            owner: args.owner,\n            spender: args.spender,\n            value: args.value\n          });\n        });\n      }\n    });\n  }\n\n  /**\n   * Get supported tokens for the platform\n   */\n  getSupportedTokens(): Array<{\n    address: Address;\n    name: string;\n    symbol: string;\n    decimals: number;\n    isNative: boolean;\n  }> {\n    return [\n      {\n        address: zeroAddress,\n        name: 'Ethereum',\n        symbol: 'ETH',\n        decimals: 18,\n        isNative: true\n      },\n      {\n        address: CONTRACT_ADDRESSES.sepolia.testToken,\n        name: 'Subscription Test Token',\n        symbol: 'SUBTEST',\n        decimals: 18,\n        isNative: false\n      }\n      // Add more supported tokens here\n    ];\n  }\n\n  /**\n   * Format token amount for display\n   */\n  formatTokenAmount(amount: bigint, decimals: number, precision: number = 6): string {\n    const formatted = formatUnits(amount, decimals);\n    const num = parseFloat(formatted);\n    \n    if (num === 0) return '0';\n    if (num < 0.000001) return '< 0.000001';\n    \n    return num.toFixed(precision).replace(/\\.?0+$/, '');\n  }\n\n  /**\n   * Parse token amount from user input\n   */\n  parseTokenAmount(amount: string, decimals: number): bigint {\n    return parseUnits(amount, decimals);\n  }\n\n  /**\n   * Estimate gas for token operations\n   */\n  async estimateGas(params: {\n    operation: 'approve' | 'transfer' | 'mint';\n    tokenAddress: Address;\n    to?: Address;\n    amount?: bigint;\n  }): Promise<bigint> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n\n    const contract = this.getTokenContract(params.tokenAddress);\n    const from = this.walletClient.account!.address;\n\n    switch (params.operation) {\n      case 'approve':\n        return await this.publicClient.estimateContractGas({\n          address: params.tokenAddress,\n          abi: mockERC20ABI,\n          functionName: 'approve',\n          args: [params.to!, params.amount!],\n          account: from\n        });\n\n      case 'transfer':\n        return await this.publicClient.estimateContractGas({\n          address: params.tokenAddress,\n          abi: mockERC20ABI,\n          functionName: 'transfer',\n          args: [params.to!, params.amount!],\n          account: from\n        });\n\n      case 'mint':\n        return await this.publicClient.estimateContractGas({\n          address: params.tokenAddress,\n          abi: mockERC20ABI,\n          functionName: 'mint',\n          args: [params.to!, params.amount!],\n          account: from\n        });\n\n      default:\n        throw new Error('Unknown operation');\n    }\n  }\n\n  /**\n   * Check if address has sufficient balance\n   */\n  async hasSufficientBalance(params: {\n    tokenAddress: Address;\n    userAddress: Address;\n    requiredAmount: bigint;\n  }): Promise<boolean> {\n    const balance = await this.getBalance(params.tokenAddress, params.userAddress);\n    return balance >= params.requiredAmount;\n  }\n}","import {\n  type Address,\n  type PublicClient,\n  type WalletClient,\n  type Hash\n} from 'viem';\nimport { subscriptionNFTABI } from '@/config/abis';\nimport { CONTRACT_ADDRESSES } from '@/config/contracts';\n\nexport interface NFTMetadata {\n  tokenId: bigint;\n  merchantId: bigint;\n  subscriber: Address;\n  expiresAt: bigint;\n  renewalCount: bigint;\n  uri: string;\n}\n\nexport interface NFTBalance {\n  merchantId: bigint;\n  balance: bigint;\n  isActive: boolean;\n}\n\n/**\n * Service for NFT operations\n * Handles ERC1155 subscription NFTs, metadata, transfers, and balance management\n */\nexport class NFTService {\n  constructor(\n    private publicClient: PublicClient,\n    private walletClient?: WalletClient\n  ) {}\n\n  /**\n   * Get NFT balance for a user and merchant\n   */\n  async getBalance(user: Address, merchantId: bigint): Promise<bigint> {\n    const contract = this.getContract();\n    return await contract.read.balanceOf(user, merchantId);\n  }\n\n  /**\n   * Get NFT balances for a user with specific merchant IDs\n   */\n  async getBalancesForMerchants(user: Address, merchantIds: bigint[]): Promise<NFTBalance[]> {\n    const contract = this.getContract();\n    const balances: NFTBalance[] = [];\n    \n    for (const merchantId of merchantIds) {\n      const balance = await contract.read.balanceOf(user, merchantId);\n      const isActive = await contract.read.isSubscriptionActive(user, merchantId);\n      \n      balances.push({\n        merchantId,\n        balance,\n        isActive\n      });\n    }\n    \n    return balances;\n  }\n\n  /**\n   * Get NFT metadata URI\n   */\n  async getTokenURI(tokenId: bigint): Promise<string> {\n    const contract = this.getContract();\n    return await contract.read.uri(tokenId);\n  }\n\n  /**\n   * Get full NFT metadata including on-chain data\n   */\n  async getFullMetadata(user: Address, merchantId: bigint): Promise<NFTMetadata> {\n    const contract = this.getContract();\n    \n    const [status, uri] = await Promise.all([\n      contract.read.getSubscriptionStatus(user, merchantId),\n      contract.read.uri(merchantId)\n    ]);\n    \n    return {\n      tokenId: merchantId,\n      merchantId,\n      subscriber: user,\n      expiresAt: status.expiresAt,\n      renewalCount: BigInt(status.renewalCount),\n      uri\n    };\n  }\n\n  /**\n   * Check if NFT transfer is allowed\n   */\n  async isTransferAllowed(\n    from: Address,\n    to: Address,\n    merchantId: bigint\n  ): Promise<boolean> {\n    try {\n      const contract = this.getContract();\n      \n      // Note: paused function doesn't exist in this contract's ABI\n      // Skipping pause check\n      \n      // Check if subscription is active\n      const isActive = await contract.read.isSubscriptionActive(from, merchantId);\n      return isActive;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Transfer NFT (subscription)\n   */\n  async safeTransferFrom(params: {\n    from: Address;\n    to: Address;\n    merchantId: bigint;\n    amount?: bigint;\n    data?: `0x${string}`;\n  }): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    const contract = this.getContract();\n    return await contract.write.safeTransferFrom(\n      params.from,\n      params.to,\n      params.merchantId,\n      params.amount || 1n,\n      params.data || '0x'\n    );\n  }\n\n  /**\n   * Batch transfer multiple NFTs\n   */\n  async safeBatchTransferFrom(params: {\n    from: Address;\n    to: Address;\n    merchantIds: bigint[];\n    amounts?: bigint[];\n    data?: `0x${string}`;\n  }): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    const contract = this.getContract();\n    const amounts = params.amounts || params.merchantIds.map(() => 1n);\n    \n    return await contract.write.safeBatchTransferFrom(\n      params.from,\n      params.to,\n      params.merchantIds,\n      amounts,\n      params.data || '0x'\n    );\n  }\n\n  /**\n   * Set approval for all NFTs\n   */\n  async setApprovalForAll(operator: Address, approved: boolean): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    const contract = this.getContract();\n    return await contract.write.setApprovalForAll(operator, approved);\n  }\n\n  /**\n   * Check if operator is approved for all\n   */\n  async isApprovedForAll(owner: Address, operator: Address): Promise<boolean> {\n    const contract = this.getContract();\n    return await contract.read.isApprovedForAll(owner, operator);\n  }\n\n  /**\n   * Burn expired subscription NFT\n   */\n  async burnExpiredSubscription(params: {\n    subscriber: Address;\n    merchantId: bigint;\n  }): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    const contract = this.getContract();\n    \n    // Check if expired\n    const status = await contract.read.getSubscriptionStatus(\n      params.subscriber,\n      params.merchantId\n    );\n    \n    const now = BigInt(Math.floor(Date.now() / 1000));\n    if (status.expiresAt > now) {\n      throw new Error('Subscription is not expired');\n    }\n    \n    return await contract.write.burnExpired(\n      params.subscriber,\n      params.merchantId\n    );\n  }\n\n  /**\n   * Get total supply for a token ID\n   */\n  async getTotalSupply(merchantId: bigint): Promise<bigint> {\n    const contract = this.getContract();\n    \n    // Would need to track this via events or add view function\n    // For now, get from events\n    const mintEvents = await this.publicClient.getContractEvents({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n      abi: subscriptionNFTABI,\n      eventName: 'SubscriptionMinted' as any,\n      args: { merchantId } as any,\n      fromBlock: 'earliest'\n    });\n    \n    const burnEvents = await this.publicClient.getContractEvents({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n      abi: subscriptionNFTABI,\n      eventName: 'SubscriptionBurned' as any,\n      args: { merchantId } as any,\n      fromBlock: 'earliest'\n    });\n    \n    return BigInt(mintEvents.length - burnEvents.length);\n  }\n\n  /**\n   * Get all token holders for a merchant\n   */\n  async getTokenHolders(merchantId: bigint): Promise<Address[]> {\n    const mintEvents = await this.publicClient.getContractEvents({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n      abi: subscriptionNFTABI,\n      eventName: 'SubscriptionMinted' as any,\n      args: { merchantId } as any,\n      fromBlock: 'earliest'\n    });\n    \n    const holders = new Set<Address>();\n    for (const event of mintEvents) {\n      const args = event.args as any;\n      holders.add(args.subscriber);\n    }\n    \n    // Filter out expired subscriptions\n    const activeHolders: Address[] = [];\n    for (const holder of holders) {\n      const isActive = await this.isSubscriptionActive(holder, merchantId);\n      if (isActive) {\n        activeHolders.push(holder);\n      }\n    }\n    \n    return activeHolders;\n  }\n\n  /**\n   * Check if subscription is active\n   */\n  async isSubscriptionActive(user: Address, merchantId: bigint): Promise<boolean> {\n    const contract = this.getContract();\n    return await contract.read.isSubscriptionActive(user, merchantId);\n  }\n\n  /**\n   * Get subscription expiry timestamp\n   */\n  async getSubscriptionExpiry(user: Address, merchantId: bigint): Promise<bigint> {\n    const contract = this.getContract();\n    const status = await contract.read.getSubscriptionStatus(user, merchantId);\n    return status.expiresAt;\n  }\n\n  /**\n   * Watch transfer events\n   */\n  watchTransferEvents(params: {\n    from?: Address;\n    to?: Address;\n    merchantId?: bigint;\n    callback: (event: {\n      operator: Address;\n      from: Address;\n      to: Address;\n      id: bigint;\n      value: bigint;\n    }) => void;\n  }) {\n    return this.publicClient.watchContractEvent({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n      abi: subscriptionNFTABI,\n      eventName: 'TransferSingle' as any,\n      onLogs: (logs) => {\n        logs.forEach((log) => {\n          const args = log.args as any;\n          \n          // Filter by params if provided\n          if (params.from && args.from !== params.from) return;\n          if (params.to && args.to !== params.to) return;\n          if (params.merchantId && args.id !== params.merchantId) return;\n          \n          params.callback({\n            operator: args.operator,\n            from: args.from,\n            to: args.to,\n            id: args.id,\n            value: args.value\n          });\n        });\n      }\n    });\n  }\n\n  /**\n   * Watch batch transfer events\n   */\n  watchBatchTransferEvents(params: {\n    from?: Address;\n    to?: Address;\n    callback: (event: {\n      operator: Address;\n      from: Address;\n      to: Address;\n      ids: bigint[];\n      values: bigint[];\n    }) => void;\n  }) {\n    return this.publicClient.watchContractEvent({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n      abi: subscriptionNFTABI,\n      eventName: 'TransferBatch' as any,\n      onLogs: (logs) => {\n        logs.forEach((log) => {\n          const args = log.args as any;\n          \n          if (params.from && args.from !== params.from) return;\n          if (params.to && args.to !== params.to) return;\n          \n          params.callback({\n            operator: args.operator,\n            from: args.from,\n            to: args.to,\n            ids: args.ids,\n            values: args.values\n          });\n        });\n      }\n    });\n  }\n\n  /**\n   * Watch approval events\n   */\n  watchApprovalEvents(params: {\n    owner?: Address;\n    operator?: Address;\n    callback: (event: {\n      account: Address;\n      operator: Address;\n      approved: boolean;\n    }) => void;\n  }) {\n    return this.publicClient.watchContractEvent({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n      abi: subscriptionNFTABI,\n      eventName: 'ApprovalForAll' as any,\n      onLogs: (logs) => {\n        logs.forEach((log) => {\n          const args = log.args as any;\n          \n          if (params.owner && args.account !== params.owner) return;\n          if (params.operator && args.operator !== params.operator) return;\n          \n          params.callback({\n            account: args.account,\n            operator: args.operator,\n            approved: args.approved\n          });\n        });\n      }\n    });\n  }\n\n  /**\n   * Generate NFT image/metadata (placeholder)\n   */\n  generateNFTMetadata(params: {\n    merchantId: bigint;\n    merchantName: string;\n    expiresAt: bigint;\n    renewalCount: bigint;\n    tier?: string;\n  }): any {\n    const expiryDate = new Date(Number(params.expiresAt) * 1000);\n    const isActive = params.expiresAt > BigInt(Math.floor(Date.now() / 1000));\n    \n    return {\n      name: `${params.merchantName} Subscription`,\n      description: `Active subscription to ${params.merchantName}`,\n      image: `https://placeholder.com/nft/${params.merchantId}`,\n      attributes: [\n        {\n          trait_type: 'Status',\n          value: isActive ? 'Active' : 'Expired'\n        },\n        {\n          trait_type: 'Expires At',\n          value: expiryDate.toISOString()\n        },\n        {\n          trait_type: 'Renewal Count',\n          value: Number(params.renewalCount)\n        },\n        {\n          trait_type: 'Tier',\n          value: params.tier || 'Standard'\n        }\n      ]\n    };\n  }\n\n  /**\n   * Get contract instance\n   */\n  private getContract() {\n    return {\n      read: {\n        balanceOf: (account: Address, id: bigint) => \n          this.publicClient.readContract({\n            address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n            abi: subscriptionNFTABI,\n            functionName: 'balanceOf',\n            args: [account, id]\n          }),\n        getSubscriptionStatus: (user: Address, merchantId: bigint) =>\n          this.publicClient.readContract({\n            address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n            abi: subscriptionNFTABI,\n            functionName: 'getSubscriptionStatus',\n            args: [user, merchantId]\n          }),\n        isSubscriptionActive: (user: Address, merchantId: bigint) =>\n          this.publicClient.readContract({\n            address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n            abi: subscriptionNFTABI,\n            functionName: 'isSubscriptionActive',\n            args: [user, merchantId]\n          }),\n        uri: (id: bigint) =>\n          this.publicClient.readContract({\n            address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n            abi: subscriptionNFTABI,\n            functionName: 'uri',\n            args: [id]\n          }),\n        isApprovedForAll: (account: Address, operator: Address) =>\n          this.publicClient.readContract({\n            address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n            abi: subscriptionNFTABI,\n            functionName: 'isApprovedForAll',\n            args: [account, operator]\n          })\n      },\n      write: {\n        safeTransferFrom: (\n          from: Address,\n          to: Address,\n          id: bigint,\n          value: bigint,\n          data: `0x${string}`\n        ) =>\n          this.walletClient!.writeContract({\n            address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n            abi: subscriptionNFTABI,\n            functionName: 'safeTransferFrom',\n            args: [from, to, id, value, data],\n            account: this.walletClient!.account!,\n            chain: undefined\n          }),\n        safeBatchTransferFrom: (\n          from: Address,\n          to: Address,\n          ids: bigint[],\n          values: bigint[],\n          data: `0x${string}`\n        ) =>\n          this.walletClient!.writeContract({\n            address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n            abi: subscriptionNFTABI,\n            functionName: 'safeBatchTransferFrom',\n            args: [from, to, ids, values, data],\n            account: this.walletClient!.account!,\n            chain: undefined\n          }),\n        setApprovalForAll: (operator: Address, approved: boolean) =>\n          this.walletClient!.writeContract({\n            address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n            abi: subscriptionNFTABI,\n            functionName: 'setApprovalForAll',\n            args: [operator, approved],\n            account: this.walletClient!.account!,\n            chain: undefined\n          }),\n        burnExpired: (subscriber: Address, merchantId: bigint) =>\n          this.walletClient!.writeContract({\n            address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n            abi: subscriptionNFTABI,\n            functionName: 'burnExpired',\n            args: [subscriber, merchantId],\n            account: this.walletClient!.account!,\n            chain: undefined\n          })\n      }\n    };\n  }\n\n  /**\n   * Check if NFT features are supported\n   */\n  async supportsInterface(interfaceId: string): Promise<boolean> {\n    const contract = this.getContract();\n    \n    const INTERFACES = {\n      ERC165: '0x01ffc9a7',\n      ERC1155: '0xd9b67a26',\n      ERC1155MetadataURI: '0x0e89341c'\n    };\n    \n    try {\n      const supported = await this.publicClient.readContract({\n        address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n        abi: subscriptionNFTABI,\n        functionName: 'supportsInterface',\n        args: [interfaceId as `0x${string}`]\n      });\n      return supported as boolean;\n    } catch {\n      return false;\n    }\n  }\n}","import {\n  type Address,\n  type PublicClient,\n  type Log,\n  type Hash,\n  parseAbiItem,\n  decodeEventLog\n} from 'viem';\nimport { subscriptionManagerABI, subscriptionNFTABI } from '@/config/abis';\nimport { CONTRACT_ADDRESSES } from '@/config/contracts';\n\nexport type EventCallback<T = any> = (event: T, log: Log) => void;\n\nexport interface MonitorConfig {\n  fromBlock?: bigint | 'latest' | 'earliest' | 'pending' | 'safe' | 'finalized';\n  pollInterval?: number;\n  batchSize?: number;\n}\n\nexport interface EventFilter {\n  address?: Address;\n  eventName?: string;\n  args?: Record<string, any>;\n}\n\n/**\n * Service for monitoring blockchain events\n * Handles real-time event subscriptions, historical queries, and event aggregation\n */\nexport class EventMonitoringService {\n  private unsubscribers: Map<string, () => void> = new Map();\n  private eventCache: Map<string, any[]> = new Map();\n  \n  constructor(private publicClient: PublicClient) {}\n\n  /**\n   * Monitor payment events in real-time\n   */\n  monitorPaymentEvents(params: {\n    subscriber?: Address;\n    merchantId?: bigint;\n    onEvent: EventCallback<{\n      subscriber: Address;\n      merchantId: bigint;\n      paymentToken: Address;\n      amount: bigint;\n      platformFee: bigint;\n      subscriptionPeriod: bigint;\n      transactionHash: Hash;\n      blockNumber: bigint;\n    }>;\n  }): string {\n    const id = `payment-${Date.now()}`;\n    \n    const unwatch = this.publicClient.watchContractEvent({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n      abi: subscriptionManagerABI,\n      eventName: 'PaymentReceived' as any,\n      args: {\n        user: params.subscriber,\n        merchantId: params.merchantId\n      } as any,\n      onLogs: (logs) => {\n        logs.forEach((log) => {\n          const args = log.args as any;\n          params.onEvent({\n            subscriber: args.user,\n            merchantId: args.merchantId,\n            paymentToken: args.paymentToken,\n            amount: args.amount,\n            platformFee: args.platformFee,\n            subscriptionPeriod: args.subscriptionPeriod,\n            transactionHash: log.transactionHash!,\n            blockNumber: log.blockNumber!\n          }, log);\n        });\n      }\n    });\n\n    this.unsubscribers.set(id, unwatch);\n    return id;\n  }\n\n  /**\n   * Monitor subscription lifecycle events\n   */\n  monitorSubscriptionLifecycle(params: {\n    subscriber?: Address;\n    merchantId?: bigint;\n    onMinted?: EventCallback<{\n      subscriber: Address;\n      merchantId: bigint;\n      expiresAt: bigint;\n      blockNumber: bigint;\n      transactionHash: Hash;\n    }>;\n    onRenewed?: EventCallback<{\n      subscriber: Address;\n      merchantId: bigint;\n      newExpiresAt: bigint;\n      renewalCount: bigint;\n      blockNumber: bigint;\n      transactionHash: Hash;\n    }>;\n    onExpired?: EventCallback<{\n      subscriber: Address;\n      merchantId: bigint;\n    }>;\n    onBurned?: EventCallback<{\n      subscriber: Address;\n      merchantId: bigint;\n    }>;\n  }): string {\n    const id = `lifecycle-${Date.now()}`;\n    const unwatchers: (() => void)[] = [];\n\n    // Monitor minting events\n    if (params.onMinted) {\n      const unwatch = this.publicClient.watchContractEvent({\n        address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n        abi: subscriptionNFTABI,\n        eventName: 'SubscriptionMinted' as any,\n        args: { user: params.subscriber, merchantId: params.merchantId } as any,\n        onLogs: (logs) => {\n          logs.forEach((log) => {\n            const args = log.args as any;\n            params.onMinted!({\n              subscriber: args.user,\n              merchantId: args.merchantId,\n              expiresAt: args.expiresAt,\n              blockNumber: log.blockNumber!,\n              transactionHash: log.transactionHash!\n            }, log);\n          });\n        }\n      });\n      unwatchers.push(unwatch);\n    }\n\n    // Monitor renewal events\n    if (params.onRenewed) {\n      const unwatch = this.publicClient.watchContractEvent({\n        address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n        abi: subscriptionNFTABI,\n        eventName: 'SubscriptionRenewed' as any,\n        args: { user: params.subscriber, merchantId: params.merchantId } as any,\n        onLogs: (logs) => {\n          logs.forEach((log) => {\n            const args = log.args as any;\n            params.onRenewed!({\n              subscriber: args.user,\n              merchantId: args.merchantId,\n              newExpiresAt: args.newExpiresAt,\n              renewalCount: args.renewalCount,\n              blockNumber: log.blockNumber!,\n              transactionHash: log.transactionHash!\n            }, log);\n          });\n        }\n      });\n      unwatchers.push(unwatch);\n    }\n\n    // Combined unsubscriber\n    const unsubscribe = () => {\n      unwatchers.forEach(unwatch => unwatch());\n    };\n\n    this.unsubscribers.set(id, unsubscribe);\n    return id;\n  }\n\n  /**\n   * Monitor merchant events\n   */\n  monitorMerchantEvents(params: {\n    merchantId?: bigint;\n    onRegistered?: EventCallback<{\n      merchantId: bigint;\n      owner: Address;\n      payoutAddress: Address;\n      blockNumber: bigint;\n      transactionHash: Hash;\n    }>;\n    onWithdrawal?: EventCallback<{\n      merchantId: bigint;\n      token: Address;\n      amount: bigint;\n      payoutAddress: Address;\n      blockNumber: bigint;\n      transactionHash: Hash;\n    }>;\n  }): string {\n    const id = `merchant-${Date.now()}`;\n    const unwatchers: (() => void)[] = [];\n\n    if (params.onRegistered) {\n      const unwatch = this.publicClient.watchContractEvent({\n        address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n        abi: subscriptionManagerABI,\n        eventName: 'MerchantRegistered' as any,\n        args: params.merchantId ? { merchantId: params.merchantId } : undefined,\n        onLogs: (logs) => {\n          logs.forEach((log) => {\n            const args = log.args as any;\n            params.onRegistered!({\n              merchantId: args.merchantId,\n              owner: args.owner,\n              payoutAddress: args.payoutAddress,\n              blockNumber: log.blockNumber!,\n              transactionHash: log.transactionHash!\n            }, log);\n          });\n        }\n      });\n      unwatchers.push(unwatch);\n    }\n\n    if (params.onWithdrawal) {\n      const unwatch = this.publicClient.watchContractEvent({\n        address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n        abi: subscriptionManagerABI,\n        eventName: 'MerchantWithdrawal' as any,\n        args: params.merchantId ? { merchantId: params.merchantId } : undefined,\n        onLogs: (logs) => {\n          logs.forEach((log) => {\n            const args = log.args as any;\n            params.onWithdrawal!({\n              merchantId: args.merchantId,\n              token: args.token,\n              amount: args.amount,\n              payoutAddress: args.payoutAddress,\n              blockNumber: log.blockNumber!,\n              transactionHash: log.transactionHash!\n            }, log);\n          });\n        }\n      });\n      unwatchers.push(unwatch);\n    }\n\n    const unsubscribe = () => {\n      unwatchers.forEach(unwatch => unwatch());\n    };\n\n    this.unsubscribers.set(id, unsubscribe);\n    return id;\n  }\n\n  /**\n   * Get historical events\n   */\n  async getHistoricalEvents(params: {\n    contractAddress: Address;\n    eventName: string;\n    fromBlock?: bigint;\n    toBlock?: bigint;\n    args?: Record<string, any>;\n  }): Promise<any[]> {\n    const abi = params.contractAddress === CONTRACT_ADDRESSES.sepolia.subscriptionManager\n      ? subscriptionManagerABI\n      : subscriptionNFTABI;\n\n    const events = await this.publicClient.getContractEvents({\n      address: params.contractAddress,\n      abi,\n      eventName: params.eventName as any,\n      fromBlock: params.fromBlock || 'earliest',\n      toBlock: params.toBlock || 'latest',\n      args: params.args\n    });\n\n    return events.map(event => ({\n      ...event.args,\n      txHash: event.transactionHash,\n      blockNumber: event.blockNumber,\n      logIndex: event.logIndex\n    }));\n  }\n\n  /**\n   * Get aggregated statistics from events\n   */\n  async getEventStatistics(params: {\n    startBlock?: bigint;\n    endBlock?: bigint;\n  }): Promise<{\n    totalPayments: number;\n    totalVolume: bigint;\n    uniqueSubscribers: number;\n    totalMerchants: number;\n    totalRenewals: number;\n  }> {\n    // Get payment events\n    const paymentEvents = await this.getHistoricalEvents({\n      contractAddress: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n      eventName: 'PaymentReceived' as any,\n      fromBlock: params.startBlock,\n      toBlock: params.endBlock\n    });\n\n    // Get merchant registration events\n    const merchantEvents = await this.getHistoricalEvents({\n      contractAddress: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n      eventName: 'MerchantRegistered' as any,\n      fromBlock: params.startBlock,\n      toBlock: params.endBlock\n    });\n\n    // Get renewal events\n    const renewalEvents = await this.getHistoricalEvents({\n      contractAddress: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n      eventName: 'SubscriptionRenewed' as any,\n      fromBlock: params.startBlock,\n      toBlock: params.endBlock\n    });\n\n    // Calculate statistics\n    const uniqueSubscribers = new Set(paymentEvents.map(e => e.user)).size;\n    const totalVolume = paymentEvents.reduce((sum, e) => sum + BigInt(e.amount), 0n);\n\n    return {\n      totalPayments: paymentEvents.length,\n      totalVolume,\n      uniqueSubscribers,\n      totalMerchants: merchantEvents.length,\n      totalRenewals: renewalEvents.length\n    };\n  }\n\n  /**\n   * Monitor multiple events with a single subscription\n   */\n  monitorMultipleEvents(configs: Array<{\n    address: Address;\n    events: Array<{\n      name: string;\n      callback: EventCallback;\n    }>;\n  }>): string {\n    const id = `multi-${Date.now()}`;\n    const unwatchers: (() => void)[] = [];\n\n    for (const config of configs) {\n      for (const event of config.events) {\n        const abi = config.address === CONTRACT_ADDRESSES.sepolia.subscriptionManager\n          ? subscriptionManagerABI\n          : subscriptionNFTABI;\n\n        const unwatch = this.publicClient.watchContractEvent({\n          address: config.address,\n          abi,\n          eventName: event.name as any,\n          onLogs: (logs) => {\n            logs.forEach((log) => {\n              event.callback(log.args, log);\n            });\n          }\n        });\n        unwatchers.push(unwatch);\n      }\n    }\n\n    const unsubscribe = () => {\n      unwatchers.forEach(unwatch => unwatch());\n    };\n\n    this.unsubscribers.set(id, unsubscribe);\n    return id;\n  }\n\n  /**\n   * Stop monitoring events\n   */\n  stopMonitoring(monitorId: string): boolean {\n    const unsubscribe = this.unsubscribers.get(monitorId);\n    if (unsubscribe) {\n      unsubscribe();\n      this.unsubscribers.delete(monitorId);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Stop all monitoring\n   */\n  stopAllMonitoring(): void {\n    this.unsubscribers.forEach(unsubscribe => unsubscribe());\n    this.unsubscribers.clear();\n    this.eventCache.clear();\n  }\n\n  /**\n   * Get cached events\n   */\n  getCachedEvents(key: string): any[] {\n    return this.eventCache.get(key) || [];\n  }\n\n  /**\n   * Cache events for later retrieval\n   */\n  cacheEvents(key: string, events: any[]): void {\n    const existing = this.eventCache.get(key) || [];\n    this.eventCache.set(key, [...existing, ...events]);\n  }\n\n  /**\n   * Clear event cache\n   */\n  clearCache(key?: string): void {\n    if (key) {\n      this.eventCache.delete(key);\n    } else {\n      this.eventCache.clear();\n    }\n  }\n\n  /**\n   * Watch for specific transaction\n   */\n  async waitForTransaction(txHash: Hash): Promise<{\n    status: 'success' | 'reverted';\n    events: any[];\n  }> {\n    const receipt = await this.publicClient.waitForTransactionReceipt({\n      hash: txHash\n    });\n\n    const events = receipt.logs.map(log => {\n      try {\n        // Try to decode with manager ABI\n        const decoded = decodeEventLog({\n          abi: subscriptionManagerABI,\n          data: log.data,\n          topics: log.topics\n        });\n        return decoded;\n      } catch {\n        try {\n          // Try to decode with NFT ABI\n          const decoded = decodeEventLog({\n            abi: subscriptionNFTABI,\n            data: log.data,\n            topics: log.topics\n          });\n          return decoded;\n        } catch {\n          return null;\n        }\n      }\n    }).filter(Boolean);\n\n    return {\n      status: receipt.status === 'success' ? 'success' : 'reverted',\n      events\n    };\n  }\n\n  /**\n   * Create event filter for custom monitoring\n   */\n  createEventFilter(params: {\n    address: Address;\n    eventSignature: string;\n    args?: any[];\n  }) {\n    return {\n      address: params.address,\n      topics: [\n        parseAbiItem(params.eventSignature),\n        ...(params.args || [])\n      ]\n    };\n  }\n}","import {\n  type Address,\n  type PublicClient,\n  formatEther\n} from 'viem';\nimport { subscriptionManagerABI, subscriptionNFTABI } from '@/config/abis';\nimport { CONTRACT_ADDRESSES } from '@/config/contracts';\n\nexport interface PlatformMetrics {\n  totalMerchants: number;\n  activeMerchants: number;\n  totalSubscribers: number;\n  activeSubscriptions: number;\n  totalVolume: bigint;\n  totalPlatformFees: bigint;\n  averageSubscriptionPrice: bigint;\n  totalRenewals: number;\n}\n\nexport interface MerchantAnalytics {\n  merchantId: bigint;\n  totalRevenue: bigint;\n  totalSubscribers: number;\n  activeSubscribers: number;\n  averageSubscriptionValue: bigint;\n  churnRate: number;\n  renewalRate: number;\n  topPaymentTokens: Array<{\n    token: Address;\n    volume: bigint;\n    transactions: number;\n  }>;\n  revenueOverTime: Array<{\n    timestamp: bigint;\n    amount: bigint;\n  }>;\n}\n\nexport interface UserAnalytics {\n  totalSpent: bigint;\n  activeSubscriptions: number;\n  totalSubscriptions: number;\n  averageSpend: bigint;\n  subscriptionHistory: Array<{\n    merchantId: bigint;\n    startDate: bigint;\n    expiresAt: bigint;\n    amount: bigint;\n    renewalCount: number;\n  }>;\n}\n\nexport interface TimeSeriesData {\n  timestamp: bigint;\n  value: number | bigint;\n  label?: string;\n}\n\n/**\n * Service for platform analytics and metrics\n * Provides comprehensive analytics for platform, merchants, and users\n */\nexport class AnalyticsService {\n  constructor(private publicClient: PublicClient) {}\n\n  /**\n   * Get overall platform metrics\n   */\n  async getPlatformMetrics(params?: {\n    fromBlock?: bigint;\n    toBlock?: bigint;\n  }): Promise<PlatformMetrics> {\n    const fromBlock = params?.fromBlock || 'earliest';\n    const toBlock = params?.toBlock || 'latest';\n\n    // Fetch all relevant events\n    const [\n      merchantRegistrations,\n      payments,\n      renewals\n    ] = await Promise.all([\n      this.publicClient.getContractEvents({\n        address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n        abi: subscriptionManagerABI,\n        eventName: 'MerchantRegistered',\n        fromBlock,\n        toBlock\n      }),\n      this.publicClient.getContractEvents({\n        address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n        abi: subscriptionManagerABI,\n        eventName: 'PaymentReceived',\n        fromBlock,\n        toBlock\n      }),\n      this.publicClient.getContractEvents({\n        address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n        abi: subscriptionNFTABI,\n        eventName: 'SubscriptionRenewed',\n        fromBlock,\n        toBlock\n      })\n    ]);\n\n    // Calculate metrics\n    const uniqueSubscribers = new Set(payments.map(p => (p.args as any).subscriber));\n    const activeMerchantIds = new Set(payments.map(p => (p.args as any).merchantId));\n    \n    const totalVolume = payments.reduce((sum, p) => \n      sum + BigInt((p.args as any).amount), 0n\n    );\n    \n    const totalPlatformFees = payments.reduce((sum, p) => \n      sum + BigInt((p.args as any).platformFee), 0n\n    );\n\n    const averageSubscriptionPrice = payments.length > 0\n      ? totalVolume / BigInt(payments.length)\n      : 0n;\n\n    return {\n      totalMerchants: merchantRegistrations.length,\n      activeMerchants: activeMerchantIds.size,\n      totalSubscribers: uniqueSubscribers.size,\n      activeSubscriptions: await this.getActiveSubscriptionCount(),\n      totalVolume,\n      totalPlatformFees,\n      averageSubscriptionPrice,\n      totalRenewals: renewals.length\n    };\n  }\n\n  /**\n   * Get analytics for a specific merchant\n   */\n  async getMerchantAnalytics(\n    merchantId: bigint,\n    params?: {\n      fromBlock?: bigint;\n      toBlock?: bigint;\n    }\n  ): Promise<MerchantAnalytics> {\n    const fromBlock = params?.fromBlock || 'earliest';\n    const toBlock = params?.toBlock || 'latest';\n\n    // Fetch merchant-specific events\n    const [payments, subscriptions, renewals] = await Promise.all([\n      this.publicClient.getContractEvents({\n        address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n        abi: subscriptionManagerABI,\n        eventName: 'PaymentReceived',\n        args: { merchantId },\n        fromBlock,\n        toBlock\n      }),\n      this.publicClient.getContractEvents({\n        address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n        abi: subscriptionNFTABI,\n        eventName: 'SubscriptionMinted',\n        args: { merchantId },\n        fromBlock,\n        toBlock\n      }),\n      this.publicClient.getContractEvents({\n        address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n        abi: subscriptionNFTABI,\n        eventName: 'SubscriptionRenewed',\n        args: { merchantId },\n        fromBlock,\n        toBlock\n      })\n    ]);\n\n    // Calculate revenue\n    const totalRevenue = payments.reduce((sum, p) => {\n      const args = p.args as any;\n      return sum + BigInt(args.amount) - BigInt(args.platformFee);\n    }, 0n);\n\n    // Get unique subscribers\n    const uniqueSubscribers = new Set(payments.map(p => (p.args as any).subscriber));\n    \n    // Calculate token volumes\n    const tokenVolumes = new Map<Address, { volume: bigint; transactions: number }>();\n    payments.forEach(p => {\n      const args = p.args as any;\n      const token = args.paymentToken;\n      const current = tokenVolumes.get(token) || { volume: 0n, transactions: 0 };\n      tokenVolumes.set(token, {\n        volume: current.volume + BigInt(args.amount),\n        transactions: current.transactions + 1\n      });\n    });\n\n    // Sort tokens by volume\n    const topPaymentTokens = Array.from(tokenVolumes.entries())\n      .map(([token, data]) => ({ token, ...data }))\n      .sort((a, b) => Number(b.volume - a.volume));\n\n    // Revenue over time\n    const revenueOverTime = payments.map(p => ({\n      timestamp: p.blockNumber || 0n,\n      amount: BigInt((p.args as any).amount) - BigInt((p.args as any).platformFee)\n    }));\n\n    // Calculate rates\n    const churnRate = await this.calculateChurnRate(merchantId, uniqueSubscribers.size);\n    const renewalRate = subscriptions.length > 0\n      ? (renewals.length / subscriptions.length) * 100\n      : 0;\n\n    return {\n      merchantId,\n      totalRevenue,\n      totalSubscribers: uniqueSubscribers.size,\n      activeSubscribers: await this.getActiveMerchantSubscribers(merchantId),\n      averageSubscriptionValue: payments.length > 0\n        ? totalRevenue / BigInt(payments.length)\n        : 0n,\n      churnRate,\n      renewalRate,\n      topPaymentTokens,\n      revenueOverTime\n    };\n  }\n\n  /**\n   * Get analytics for a specific user\n   */\n  async getUserAnalytics(\n    userAddress: Address,\n    params?: {\n      fromBlock?: bigint;\n      toBlock?: bigint;\n    }\n  ): Promise<UserAnalytics> {\n    const fromBlock = params?.fromBlock || 'earliest';\n    const toBlock = params?.toBlock || 'latest';\n\n    // Fetch user-specific events\n    const [payments, subscriptions, renewals] = await Promise.all([\n      this.publicClient.getContractEvents({\n        address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n        abi: subscriptionManagerABI,\n        eventName: 'PaymentReceived',\n        args: { user: userAddress },\n        fromBlock,\n        toBlock\n      }),\n      this.publicClient.getContractEvents({\n        address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n        abi: subscriptionNFTABI,\n        eventName: 'SubscriptionMinted',\n        args: { user: userAddress },\n        fromBlock,\n        toBlock\n      }),\n      this.publicClient.getContractEvents({\n        address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n        abi: subscriptionNFTABI,\n        eventName: 'SubscriptionRenewed',\n        args: { user: userAddress },\n        fromBlock,\n        toBlock\n      })\n    ]);\n\n    // Calculate total spent\n    const totalSpent = payments.reduce((sum, p) => \n      sum + BigInt((p.args as any).amount), 0n\n    );\n\n    // Build subscription history\n    const subscriptionMap = new Map<string, any>();\n    \n    // Add initial subscriptions\n    subscriptions.forEach(s => {\n      const args = s.args as any;\n      const key = `${args.merchantId}`;\n      subscriptionMap.set(key, {\n        merchantId: args.merchantId,\n        startDate: s.blockNumber || 0n,\n        expiresAt: args.expiresAt,\n        amount: 0n,\n        renewalCount: 0\n      });\n    });\n\n    // Add renewals\n    renewals.forEach(r => {\n      const args = r.args as any;\n      const key = `${args.merchantId}`;\n      const existing = subscriptionMap.get(key);\n      if (existing) {\n        existing.expiresAt = args.newExpiresAt;\n        existing.renewalCount = Number(args.renewalCount);\n      }\n    });\n\n    // Add payment amounts\n    payments.forEach(p => {\n      const args = p.args as any;\n      const key = `${args.merchantId}`;\n      const existing = subscriptionMap.get(key);\n      if (existing) {\n        existing.amount = existing.amount + BigInt(args.amount);\n      }\n    });\n\n    const subscriptionHistory = Array.from(subscriptionMap.values());\n\n    // Count active subscriptions\n    const now = BigInt(Math.floor(Date.now() / 1000));\n    const activeSubscriptions = subscriptionHistory.filter(s => \n      s.expiresAt > now\n    ).length;\n\n    return {\n      totalSpent,\n      activeSubscriptions,\n      totalSubscriptions: subscriptionHistory.length,\n      averageSpend: subscriptionHistory.length > 0\n        ? totalSpent / BigInt(subscriptionHistory.length)\n        : 0n,\n      subscriptionHistory\n    };\n  }\n\n  /**\n   * Get revenue trends over time\n   */\n  async getRevenueTrends(params: {\n    merchantId?: bigint;\n    interval: 'daily' | 'weekly' | 'monthly';\n    fromBlock?: bigint;\n    toBlock?: bigint;\n  }): Promise<TimeSeriesData[]> {\n    const payments = await this.publicClient.getContractEvents({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n      abi: subscriptionManagerABI,\n      eventName: 'PaymentReceived',\n      args: params.merchantId ? { merchantId: params.merchantId } : undefined,\n      fromBlock: params.fromBlock || 'earliest',\n      toBlock: params.toBlock || 'latest'\n    });\n\n    // Group by interval\n    const grouped = new Map<string, bigint>();\n    \n    for (const payment of payments) {\n      const block = await this.publicClient.getBlock({ \n        blockNumber: payment.blockNumber! \n      });\n      const timestamp = block.timestamp;\n      const date = new Date(Number(timestamp) * 1000);\n      \n      let key: string;\n      switch (params.interval) {\n        case 'daily':\n          key = date.toISOString().split('T')[0];\n          break;\n        case 'weekly':\n          const week = this.getWeekNumber(date);\n          key = `${date.getFullYear()}-W${week}`;\n          break;\n        case 'monthly':\n          key = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;\n          break;\n      }\n      \n      const args = payment.args as any;\n      const current = grouped.get(key) || 0n;\n      grouped.set(key, current + BigInt(args.amount));\n    }\n\n    return Array.from(grouped.entries()).map(([label, value]) => ({\n      timestamp: BigInt(Date.parse(label) / 1000),\n      value,\n      label\n    })).sort((a, b) => Number(a.timestamp - b.timestamp));\n  }\n\n  /**\n   * Get subscription growth metrics\n   */\n  async getSubscriptionGrowth(params: {\n    merchantId?: bigint;\n    interval: 'daily' | 'weekly' | 'monthly';\n    fromBlock?: bigint;\n    toBlock?: bigint;\n  }): Promise<TimeSeriesData[]> {\n    const subscriptions = await this.publicClient.getContractEvents({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n      abi: subscriptionNFTABI,\n      eventName: 'SubscriptionMinted',\n      args: params.merchantId ? { merchantId: params.merchantId } : undefined,\n      fromBlock: params.fromBlock || 'earliest',\n      toBlock: params.toBlock || 'latest'\n    });\n\n    // Group by interval\n    const grouped = new Map<string, number>();\n    \n    for (const subscription of subscriptions) {\n      const block = await this.publicClient.getBlock({ \n        blockNumber: subscription.blockNumber! \n      });\n      const timestamp = block.timestamp;\n      const date = new Date(Number(timestamp) * 1000);\n      \n      let key: string;\n      switch (params.interval) {\n        case 'daily':\n          key = date.toISOString().split('T')[0];\n          break;\n        case 'weekly':\n          const week = this.getWeekNumber(date);\n          key = `${date.getFullYear()}-W${week}`;\n          break;\n        case 'monthly':\n          key = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;\n          break;\n      }\n      \n      const current = grouped.get(key) || 0;\n      grouped.set(key, current + 1);\n    }\n\n    // Calculate cumulative growth\n    let cumulative = 0;\n    const result: TimeSeriesData[] = [];\n    \n    Array.from(grouped.entries())\n      .sort(([a], [b]) => a.localeCompare(b))\n      .forEach(([label, count]) => {\n        cumulative += count;\n        result.push({\n          timestamp: BigInt(Date.parse(label) / 1000),\n          value: cumulative,\n          label\n        });\n      });\n\n    return result;\n  }\n\n  /**\n   * Get token distribution analytics\n   */\n  async getTokenDistribution(params?: {\n    merchantId?: bigint;\n    fromBlock?: bigint;\n    toBlock?: bigint;\n  }): Promise<Array<{\n    token: Address;\n    symbol: string;\n    volume: bigint;\n    transactions: number;\n    percentage: number;\n  }>> {\n    const payments = await this.publicClient.getContractEvents({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n      abi: subscriptionManagerABI,\n      eventName: 'PaymentReceived',\n      args: params?.merchantId ? { merchantId: params.merchantId } : undefined,\n      fromBlock: params?.fromBlock || 'earliest',\n      toBlock: params?.toBlock || 'latest'\n    });\n\n    const tokenStats = new Map<Address, { volume: bigint; transactions: number }>();\n    let totalVolume = 0n;\n\n    payments.forEach(p => {\n      const args = p.args as any;\n      const token = args.paymentToken;\n      const current = tokenStats.get(token) || { volume: 0n, transactions: 0 };\n      tokenStats.set(token, {\n        volume: current.volume + BigInt(args.amount),\n        transactions: current.transactions + 1\n      });\n      totalVolume += BigInt(args.amount);\n    });\n\n    return Array.from(tokenStats.entries()).map(([token, stats]) => ({\n      token,\n      symbol: token === '0x0000000000000000000000000000000000000000' ? 'ETH' : 'SUBTEST',\n      volume: stats.volume,\n      transactions: stats.transactions,\n      percentage: totalVolume > 0n \n        ? Number((stats.volume * 10000n) / totalVolume) / 100\n        : 0\n    })).sort((a, b) => Number(b.volume - a.volume));\n  }\n\n  /**\n   * Calculate platform conversion rate\n   */\n  async getConversionMetrics(): Promise<{\n    visitorToSubscriber: number;\n    trialToPayment: number;\n    renewalRate: number;\n  }> {\n    // This would require additional tracking mechanisms\n    // Placeholder implementation\n    return {\n      visitorToSubscriber: 0,\n      trialToPayment: 0,\n      renewalRate: 0\n    };\n  }\n\n  // Helper methods\n\n  private async getActiveSubscriptionCount(): Promise<number> {\n    // This would require iterating through all NFT holders\n    // and checking expiration dates\n    return 0;\n  }\n\n  private async getActiveMerchantSubscribers(merchantId: bigint): Promise<number> {\n    // This would require checking all merchant subscriptions\n    return 0;\n  }\n\n  private async calculateChurnRate(\n    merchantId: bigint, \n    totalSubscribers: number\n  ): Promise<number> {\n    // Calculate based on expired vs active subscriptions\n    return 0;\n  }\n\n  private getWeekNumber(date: Date): number {\n    const firstDayOfYear = new Date(date.getFullYear(), 0, 1);\n    const pastDaysOfYear = (date.getTime() - firstDayOfYear.getTime()) / 86400000;\n    return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);\n  }\n\n  /**\n   * Format analytics data for display\n   */\n  formatMetrics(metrics: PlatformMetrics): any {\n    return {\n      ...metrics,\n      totalVolume: formatEther(metrics.totalVolume),\n      totalPlatformFees: formatEther(metrics.totalPlatformFees),\n      averageSubscriptionPrice: formatEther(metrics.averageSubscriptionPrice)\n    };\n  }\n\n  /**\n   * Get total number of subscriptions (simplified version for tests)\n   */\n  async getTotalSubscriptions(): Promise<bigint> {\n    try {\n      const subscriptions = await this.publicClient.getContractEvents({\n        address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n        abi: subscriptionNFTABI,\n        eventName: 'SubscriptionMinted',\n        fromBlock: 'earliest',\n        toBlock: 'latest'\n      });\n      return BigInt(subscriptions.length);\n    } catch {\n      return 0n;\n    }\n  }\n\n  /**\n   * Get merchant statistics (simplified version for tests)\n   */\n  async getMerchantStatistics(merchantId: bigint): Promise<{\n    totalRevenue: bigint;\n    activeSubscriptions: bigint;\n    totalSubscribers: bigint;\n  }> {\n    try {\n      const payments = await this.publicClient.getContractEvents({\n        address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n        abi: subscriptionManagerABI,\n        eventName: 'PaymentReceived',\n        args: { merchantId },\n        fromBlock: 'earliest',\n        toBlock: 'latest'\n      });\n\n      const totalRevenue = payments.reduce((sum, p) => {\n        const args = p.args as any;\n        return sum + BigInt(args.amount) - BigInt(args.platformFee || 0n);\n      }, 0n);\n\n      const uniqueSubscribers = new Set(payments.map(p => (p.args as any).user));\n\n      return {\n        totalRevenue,\n        activeSubscriptions: BigInt(uniqueSubscribers.size), // Simplified\n        totalSubscribers: BigInt(uniqueSubscribers.size)\n      };\n    } catch {\n      return {\n        totalRevenue: 0n,\n        activeSubscriptions: 0n,\n        totalSubscribers: 0n\n      };\n    }\n  }\n\n  /**\n   * Get platform statistics (simplified version for tests)\n   */\n  async getPlatformStatistics(): Promise<{\n    totalMerchants: bigint;\n    totalSubscriptions: bigint;\n    totalVolume: bigint;\n  }> {\n    try {\n      const [merchantRegistrations, subscriptions, payments] = await Promise.all([\n        this.publicClient.getContractEvents({\n          address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n          abi: subscriptionManagerABI,\n          eventName: 'MerchantRegistered',\n          fromBlock: 'earliest',\n          toBlock: 'latest'\n        }),\n        this.publicClient.getContractEvents({\n          address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n          abi: subscriptionNFTABI,\n          eventName: 'SubscriptionMinted',\n          fromBlock: 'earliest',\n          toBlock: 'latest'\n        }),\n        this.publicClient.getContractEvents({\n          address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n          abi: subscriptionManagerABI,\n          eventName: 'PaymentReceived',\n          fromBlock: 'earliest',\n          toBlock: 'latest'\n        })\n      ]);\n\n      const totalVolume = payments.reduce((sum, p) => \n        sum + BigInt((p.args as any).amount), 0n\n      );\n\n      return {\n        totalMerchants: BigInt(merchantRegistrations.length),\n        totalSubscriptions: BigInt(subscriptions.length),\n        totalVolume\n      };\n    } catch {\n      return {\n        totalMerchants: 0n,\n        totalSubscriptions: 0n,\n        totalVolume: 0n\n      };\n    }\n  }\n}","import { type Address } from 'viem';\nimport { keccak256, toHex } from 'viem';\n\n// Contract role hashes - computed using keccak256\nexport const ROLE_HASHES = {\n  DEFAULT_ADMIN: '0x0000000000000000000000000000000000000000000000000000000000000000',\n  MANAGER: keccak256(toHex('MANAGER_ROLE')),\n  REACTIVE: keccak256(toHex('REACTIVE_ROLE')),\n  PAUSER: keccak256(toHex('PAUSER_ROLE'))\n} as const;\n\n// Zero address constant\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000' as Address;\n\n// ETH placeholder address for native token operations\nexport const ETH_ADDRESS = ZERO_ADDRESS;\n\n// Default gas limits\nexport const GAS_LIMITS = {\n  SUBSCRIBE: 300000n,\n  WITHDRAW: 150000n,\n  REGISTER_MERCHANT: 200000n,\n  SET_PRICE: 100000n,\n  GRANT_ROLE: 100000n,\n  REVOKE_ROLE: 100000n\n} as const;\n\n// Default durations (in seconds)\nexport const DURATIONS = {\n  DEFAULT_SUBSCRIPTION_PERIOD: 2592000, // 30 days\n  DEFAULT_GRACE_PERIOD: 604800, // 7 days\n  MIN_SUBSCRIPTION_PERIOD: 3600, // 1 hour\n  MAX_SUBSCRIPTION_PERIOD: 31536000 // 365 days\n} as const;\n\n// Platform fee constants\nexport const PLATFORM_FEE = {\n  DEFAULT_BPS: 500, // 5%\n  MAX_BPS: 10000 // 100% (for calculations)\n} as const;\n\n// Event monitoring intervals\nexport const MONITORING = {\n  POLL_INTERVAL: 2000, // 2 seconds\n  MAX_BLOCK_RANGE: 5000, // Maximum blocks to query at once\n  CONFIRMATION_BLOCKS: 2 // Blocks to wait for confirmation\n} as const;\n\n// Reactive Network specific\nexport const REACTIVE_NETWORK = {\n  CHAIN_ID: 10672,\n  RPC_URL: 'https://lasna-rpc.rnk.dev/',\n  EXPLORER_URL: 'https://reactive-explorer.rnk.dev/',\n  NATIVE_SYMBOL: 'REACT',\n  SUBSCRIPTION_FEE: '0.001' // in REACT tokens\n} as const;\n\n// Sepolia testnet\nexport const SEPOLIA = {\n  CHAIN_ID: 11155111,\n  RPC_URL: 'https://ethereum-sepolia-public.nodies.app',\n  EXPLORER_URL: 'https://sepolia.etherscan.io/',\n  NATIVE_SYMBOL: 'ETH'\n} as const;\n\n// Error messages\nexport const ERRORS = {\n  NOT_CONNECTED: 'SDK not connected. Please connect wallet first.',\n  INVALID_CHAIN: 'Invalid chain. Please switch to a supported network.',\n  INSUFFICIENT_BALANCE: 'Insufficient balance for this operation.',\n  MERCHANT_NOT_FOUND: 'Merchant not found.',\n  SUBSCRIPTION_EXPIRED: 'Subscription has expired.',\n  INVALID_TOKEN: 'Token not accepted by merchant.',\n  TRANSACTION_FAILED: 'Transaction failed. Please try again.',\n  NO_WALLET: 'No wallet client provided.',\n  INVALID_ADDRESS: 'Invalid address format.',\n  PRICE_NOT_SET: 'Price not set for this token.'\n} as const;\n\n// Success messages\nexport const SUCCESS = {\n  SUBSCRIPTION_CREATED: 'Successfully subscribed!',\n  SUBSCRIPTION_RENEWED: 'Subscription renewed successfully.',\n  MERCHANT_REGISTERED: 'Merchant registered successfully.',\n  WITHDRAWAL_COMPLETE: 'Withdrawal completed successfully.',\n  PRICE_UPDATED: 'Price updated successfully.',\n  ROLE_GRANTED: 'Role granted successfully.',\n  ROLE_REVOKED: 'Role revoked successfully.'\n} as const;","import {\n  getContract,\n  type Address,\n  type PublicClient,\n  type WalletClient,\n  type Hash,\n  parseEther\n} from 'viem';\nimport { subscriptionManagerABI, subscriptionNFTABI } from '@/config/abis';\nimport { CONTRACT_ADDRESSES } from '@/config/contracts';\nimport { ROLE_HASHES } from '@/config/constants';\n\n/**\n * Service for admin and owner operations\n * Handles platform configuration, fee management, role management, and emergency functions\n */\nexport class AdminService {\n  private managerContract: any;\n  private nftContract: any;\n\n  constructor(\n    private publicClient: PublicClient,\n    private walletClient?: WalletClient\n  ) {\n    this.managerContract = getContract({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n      abi: subscriptionManagerABI,\n      client: { public: this.publicClient, wallet: this.walletClient }\n    });\n\n    this.nftContract = getContract({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n      abi: subscriptionNFTABI,\n      client: { public: this.publicClient, wallet: this.walletClient }\n    });\n  }\n\n  /**\n   * Check if address is contract owner\n   */\n  async isOwner(address: Address): Promise<boolean> {\n    try {\n      const owner = await this.managerContract.read.owner();\n      return owner.toLowerCase() === address.toLowerCase();\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Check if address has specific role\n   */\n  async hasRole(role: string, address: Address): Promise<boolean> {\n    try {\n      const roleHash = this.getRoleHash(role);\n      return await this.nftContract.read.hasRole([roleHash, address]);\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Set platform fee (owner only)\n   */\n  async setPlatformFee(feeBps: number): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    if (feeBps > 10000) throw new Error('Fee cannot exceed 100%');\n    \n    return await this.managerContract.write.setPlatformFee([feeBps]);\n  }\n\n  /**\n   * Get current platform fee\n   */\n  async getPlatformFee(): Promise<number> {\n    const fee = await this.managerContract.read.platformFeeBps();\n    return Number(fee);\n  }\n\n  /**\n   * Set subscription NFT contract address (one-time setup)\n   */\n  async setSubscriptionNFT(nftAddress: Address): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    return await this.managerContract.write.setSubscriptionNFT([nftAddress]);\n  }\n\n  /**\n   * Set reactive contract address on NFT\n   */\n  async setReactiveContract(reactiveAddress: Address): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    return await this.nftContract.write.setReactiveContract([reactiveAddress]);\n  }\n\n  /**\n   * Grant role to address\n   */\n  async grantRole(role: string, address: Address): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    const roleHash = this.getRoleHash(role);\n    return await this.nftContract.write.grantRole([roleHash, address]);\n  }\n\n  /**\n   * Revoke role from address\n   */\n  async revokeRole(role: string, address: Address): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    const roleHash = this.getRoleHash(role);\n    return await this.nftContract.write.revokeRole([roleHash, address]);\n  }\n\n  /**\n   * Withdraw platform fees\n   */\n  async withdrawPlatformFees(params: {\n    token: Address;\n    to: Address;\n  }): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    return await this.managerContract.write.withdrawPlatformFees([\n      params.token,\n      params.to\n    ]);\n  }\n\n  /**\n   * Get platform fee balance for a token\n   */\n  async getPlatformFeeBalance(token: Address): Promise<bigint> {\n    // This would need to be tracked via events or a getter function\n    // For now, return 0 as placeholder\n    return 0n;\n  }\n\n  /**\n   * Transfer ownership of manager contract\n   */\n  async transferOwnership(newOwner: Address): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    return await this.managerContract.write.transferOwnership([newOwner]);\n  }\n\n  /**\n   * Renounce ownership (irreversible!)\n   */\n  async renounceOwnership(): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    const confirmed = confirm('This action is irreversible! Are you sure you want to renounce ownership?');\n    if (!confirmed) throw new Error('Operation cancelled');\n    \n    return await this.managerContract.write.renounceOwnership();\n  }\n\n  /**\n   * Pause NFT transfers (emergency)\n   */\n  async pauseNFT(): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    return await this.nftContract.write.pause();\n  }\n\n  /**\n   * Unpause NFT transfers\n   */\n  async unpauseNFT(): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    return await this.nftContract.write.unpause();\n  }\n\n  /**\n   * Check if NFT is paused\n   */\n  async isNFTPaused(): Promise<boolean> {\n    return await this.nftContract.read.paused();\n  }\n\n  /**\n   * Update base URI for NFT metadata\n   */\n  async setBaseURI(uri: string): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    return await this.nftContract.write.setBaseURI([uri]);\n  }\n\n  /**\n   * Get contract configuration\n   */\n  async getContractConfig(): Promise<{\n    manager: {\n      owner: Address;\n      platformFeeBps: number;\n      subscriptionNFT: Address;\n    };\n    nft: {\n      baseURI: string;\n      paused: boolean;\n      reactiveContract: Address;\n    };\n  }> {\n    const [\n      owner,\n      platformFeeBps,\n      subscriptionNFT,\n      baseURI,\n      paused\n    ] = await Promise.all([\n      this.managerContract.read.owner(),\n      this.managerContract.read.platformFeeBps(),\n      this.managerContract.read.subscriptionNFT(),\n      this.nftContract.read.uri([0n]), // Get base URI\n      this.nftContract.read.paused()\n    ]);\n\n    return {\n      manager: {\n        owner,\n        platformFeeBps: Number(platformFeeBps),\n        subscriptionNFT\n      },\n      nft: {\n        baseURI,\n        paused,\n        reactiveContract: CONTRACT_ADDRESSES.reactive.subscriptionReactive\n      }\n    };\n  }\n\n  /**\n   * Get platform statistics\n   */\n  async getPlatformStats(): Promise<{\n    totalMerchants: number;\n    totalSubscriptions: number;\n    platformRevenue: Map<Address, bigint>;\n  }> {\n    // This would require event parsing or additional view functions\n    // Placeholder implementation\n    return {\n      totalMerchants: 0,\n      totalSubscriptions: 0,\n      platformRevenue: new Map()\n    };\n  }\n\n  /**\n   * Emergency withdrawal (if contract has stuck funds)\n   */\n  async emergencyWithdraw(params: {\n    contract: 'manager' | 'nft';\n    token: Address;\n    to: Address;\n    amount: bigint;\n  }): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    // This would need to be implemented in the contracts\n    // For now, throw not implemented\n    throw new Error('Emergency withdrawal not implemented');\n  }\n\n  /**\n   * Batch operations for efficiency\n   */\n  async batchGrantRoles(params: Array<{\n    role: string;\n    address: Address;\n  }>): Promise<Hash[]> {\n    const hashes: Hash[] = [];\n    \n    for (const param of params) {\n      const hash = await this.grantRole(param.role, param.address);\n      hashes.push(hash);\n    }\n    \n    return hashes;\n  }\n\n  /**\n   * Monitor admin events\n   */\n  watchAdminEvents(callback: (event: any) => void) {\n    const unwatchers: (() => void)[] = [];\n\n    // Watch ownership transfers\n    const watchOwnershipTransfer = this.publicClient.watchContractEvent({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n      abi: subscriptionManagerABI,\n      eventName: 'OwnershipTransferred',\n      onLogs: (logs) => {\n        logs.forEach((log) => {\n          callback({\n            type: 'OwnershipTransferred',\n            ...log.args\n          });\n        });\n      }\n    });\n    unwatchers.push(watchOwnershipTransfer);\n\n    // Watch role grants\n    const watchRoleGranted = this.publicClient.watchContractEvent({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n      abi: subscriptionNFTABI,\n      eventName: 'RoleGranted',\n      onLogs: (logs) => {\n        logs.forEach((log) => {\n          callback({\n            type: 'RoleGranted',\n            ...log.args\n          });\n        });\n      }\n    });\n    unwatchers.push(watchRoleGranted);\n\n    // Watch role revokes\n    const watchRoleRevoked = this.publicClient.watchContractEvent({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n      abi: subscriptionNFTABI,\n      eventName: 'RoleRevoked',\n      onLogs: (logs) => {\n        logs.forEach((log) => {\n          callback({\n            type: 'RoleRevoked',\n            ...log.args\n          });\n        });\n      }\n    });\n    unwatchers.push(watchRoleRevoked);\n\n    // Return combined unsubscribe function\n    return () => {\n      unwatchers.forEach(unwatch => unwatch());\n    };\n  }\n\n  /**\n   * Get role hash for a role name\n   */\n  private getRoleHash(role: string): string {\n    // Use constants from the central constants file\n    return ROLE_HASHES[role as keyof typeof ROLE_HASHES] || role;\n  }\n\n  /**\n   * Validate admin permissions before operation\n   */\n  async validateAdminPermissions(address: Address): Promise<{\n    isOwner: boolean;\n    isManager: boolean;\n    isPauser: boolean;\n  }> {\n    const [isOwner, isManager, isPauser] = await Promise.all([\n      this.isOwner(address),\n      this.hasRole('MANAGER', address),\n      this.hasRole('PAUSER', address)\n    ]);\n\n    return { isOwner, isManager, isPauser };\n  }\n}","import {\n  type Address,\n  type PublicClient,\n  type WalletClient,\n  type Hash,\n  parseEther\n} from 'viem';\nimport { subscriptionReactiveABI, subscriptionNFTABI } from '@/config/abis';\nimport { CONTRACT_ADDRESSES } from '@/config/contracts';\n\nexport interface ReactiveSubscription {\n  id: bigint;\n  config: SubscriptionConfig;\n  active: boolean;\n}\n\nexport interface SubscriptionConfig {\n  subscriber: Address;\n  paymentToken: Address;\n  duration: bigint;\n}\n\nexport interface TrackedExpiration {\n  user: Address;\n  merchantId: bigint;\n  expiresAt: bigint;\n}\n\nexport interface ReactiveEvent {\n  blockNumber: bigint;\n  timestamp: bigint;\n  eventType: 'PaymentProcessed' | 'SubscriptionExpired' | 'CronTriggered';\n  data: any;\n}\n\n/**\n * Service for Reactive Network operations\n * Handles cross-chain event monitoring, subscription automation, and CRON jobs\n */\nexport class ReactiveNetworkService {\n  private readonly REACTIVE_RPC = 'https://lasna-rpc.rnk.dev/';\n  private readonly L1_CHAIN_ID = 11155111; // Sepolia\n  \n  constructor(\n    private publicClient: PublicClient,\n    private walletClient?: WalletClient,\n    private reactiveProvider?: PublicClient\n  ) {}\n\n  /**\n   * Subscribe to payment events from L1\n   */\n  async subscribeToPaymentEvents(params: {\n    chainId?: bigint;\n    contractAddress?: Address;\n  }): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    const contract = this.getContract();\n    \n    const chainId = params.chainId || BigInt(this.L1_CHAIN_ID);\n    const contractAddress = params.contractAddress || CONTRACT_ADDRESSES.sepolia.subscriptionManager;\n    \n    return await contract.write.subscribeToPaymentEvents(chainId, contractAddress);\n  }\n\n  /**\n   * Subscribe to CRON job for expiry checks\n   */\n  async subscribeToCronJob(params: {\n    interval: bigint; // in seconds\n  }): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    const contract = this.getContract();\n    \n    return await contract.write.subscribeToCron(params.interval);\n  }\n\n  /**\n   * Get tracked subscription expirations\n   * Note: The reactive contract tracks expirations but doesn't expose subscription lists\n   * This method gets expiring subscriptions within a time range\n   */\n  async getExpiringSubscriptions(beforeTimestamp?: bigint, limit: bigint = 100n): Promise<{\n    users: Address[];\n    merchantIds: bigint[];\n  }> {\n    try {\n      const contract = this.getContract();\n      const timestamp = beforeTimestamp || BigInt(Math.floor(Date.now() / 1000) + 86400); // Default: next 24 hours\n      \n      const [users, merchantIds] = await contract.read.getExpiringSubscriptions(timestamp, limit);\n      \n      return {\n        users: users as Address[],\n        merchantIds: merchantIds as bigint[]\n      };\n    } catch (error) {\n      console.log('Error fetching expiring subscriptions:', error);\n      return { users: [], merchantIds: [] };\n    }\n  }\n\n  /**\n   * Get tracked expiration for a specific user and merchant\n   */\n  async getTrackedExpiration(user: Address, merchantId: bigint): Promise<bigint> {\n    try {\n      const contract = this.getContract();\n      return await contract.read.getTrackedExpiration(user, merchantId);\n    } catch (error) {\n      console.log('Error fetching tracked expiration:', error);\n      return 0n;\n    }\n  }\n\n  /**\n   * Get debt amount from reactive contract\n   */\n  async getDebt(): Promise<bigint> {\n    try {\n      const contract = this.getContract();\n      return await contract.read.getDebt();\n    } catch (error) {\n      console.log('Error fetching debt:', error);\n      return 0n;\n    }\n  }\n\n  /**\n   * Pause reactive contract\n   */\n  async pauseContract(): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    const contract = this.getContract();\n    return await contract.write.pause();\n  }\n\n  /**\n   * Resume reactive contract\n   */\n  async resumeContract(): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    const contract = this.getContract();\n    return await contract.write.resume();\n  }\n\n  /**\n   * Check if reactive contract has REACTIVE_ROLE on NFT contract\n   */\n  async hasReactiveRole(): Promise<boolean> {\n    // Check role on the NFT contract using the NFT ABI\n    const REACTIVE_ROLE = '0x6c32362347342e2fb3c7c64c0c4fe5a21823981ee87c54bb16cfffc87c68c502';\n    \n    return await this.publicClient.readContract({\n      address: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n      abi: subscriptionNFTABI,\n      functionName: 'hasRole',\n      args: [REACTIVE_ROLE, CONTRACT_ADDRESSES.reactive.subscriptionReactive] as readonly [`0x${string}`, Address]\n    }) as boolean;\n  }\n\n  /**\n   * Get REACT token balance\n   */\n  async getReactBalance(address: Address): Promise<bigint> {\n    if (!this.reactiveProvider) {\n      throw new Error('Reactive provider not configured');\n    }\n    \n    return await this.reactiveProvider.getBalance({ address });\n  }\n\n  /**\n   * Fund reactive contract with REACT tokens\n   */\n  async fundReactiveContract(amount: string): Promise<Hash> {\n    if (!this.walletClient) throw new Error('Wallet not connected');\n    \n    // Send REACT tokens to the reactive contract\n    return await this.walletClient.sendTransaction({\n      account: this.walletClient.account!,\n      to: CONTRACT_ADDRESSES.reactive.subscriptionReactive,\n      value: parseEther(amount),\n      chain: this.walletClient.chain\n    });\n  }\n\n  /**\n   * Get reactive contract configuration\n   * Note: The reactive contract doesn't expose these values directly\n   * These would typically be stored in the contract's config or retrieved from events\n   */\n  async getReactiveConfig(): Promise<{\n    subscriptionManager: Address;\n    subscriptionNFT: Address;\n    targetChainId: bigint;\n    paymentEventSubscriptionId?: bigint;\n    cronSubscriptionId?: bigint;\n  }> {\n    // Since the reactive contract doesn't expose these values directly,\n    // we return the known contract addresses from our configuration\n    return {\n      subscriptionManager: CONTRACT_ADDRESSES.sepolia.subscriptionManager,\n      subscriptionNFT: CONTRACT_ADDRESSES.sepolia.subscriptionNFT,\n      targetChainId: BigInt(this.L1_CHAIN_ID), // Sepolia chain ID\n      paymentEventSubscriptionId: undefined, // Would need to track from events\n      cronSubscriptionId: undefined // Would need to track from events\n    };\n  }\n\n  /**\n   * Monitor reactive events\n   */\n  watchReactiveEvents(params: {\n    onPaymentProcessed?: (event: {\n      subscriber: Address;\n      merchantId: bigint;\n      amount: bigint;\n      token: Address;\n    }) => void;\n    onSubscriptionExpired?: (event: {\n      subscriber: Address;\n      merchantId: bigint;\n    }) => void;\n    onCronTriggered?: (event: {\n      timestamp: bigint;\n      processedCount: number;\n    }) => void;\n  }) {\n    if (!this.reactiveProvider) {\n      throw new Error('Reactive provider not configured');\n    }\n    \n    const unwatchers: (() => void)[] = [];\n    \n    // Watch payment processed events\n    if (params.onPaymentProcessed) {\n      const unwatch = this.reactiveProvider.watchContractEvent({\n        address: CONTRACT_ADDRESSES.reactive.subscriptionReactive,\n        abi: subscriptionReactiveABI,\n        eventName: 'PaymentProcessed' as any,\n        onLogs: (logs) => {\n          logs.forEach((log) => {\n            const args = log.args as any;\n            params.onPaymentProcessed!({\n              subscriber: args.subscriber,\n              merchantId: args.merchantId,\n              amount: args.amount,\n              token: args.token\n            });\n          });\n        }\n      });\n      unwatchers.push(unwatch);\n    }\n    \n    // Watch subscription expired events\n    if (params.onSubscriptionExpired) {\n      const unwatch = this.reactiveProvider.watchContractEvent({\n        address: CONTRACT_ADDRESSES.reactive.subscriptionReactive,\n        abi: subscriptionReactiveABI,\n        eventName: 'SubscriptionExpired' as any,\n        onLogs: (logs) => {\n          logs.forEach((log) => {\n            const args = log.args as any;\n            params.onSubscriptionExpired!({\n              subscriber: args.subscriber,\n              merchantId: args.merchantId\n            });\n          });\n        }\n      });\n      unwatchers.push(unwatch);\n    }\n    \n    // Watch CRON triggered events\n    if (params.onCronTriggered) {\n      const unwatch = this.reactiveProvider.watchContractEvent({\n        address: CONTRACT_ADDRESSES.reactive.subscriptionReactive,\n        abi: subscriptionReactiveABI,\n        eventName: 'CronTriggered' as any,\n        onLogs: (logs) => {\n          logs.forEach((log) => {\n            const args = log.args as any;\n            params.onCronTriggered!({\n              timestamp: args.timestamp,\n              processedCount: args.processedCount\n            });\n          });\n        }\n      });\n      unwatchers.push(unwatch);\n    }\n    \n    // Return unsubscribe function\n    return () => {\n      unwatchers.forEach(unwatch => unwatch());\n    };\n  }\n\n  /**\n   * Get reactive event history\n   */\n  async getEventHistory(params?: {\n    fromBlock?: bigint;\n    toBlock?: bigint;\n    eventType?: 'PaymentProcessed' | 'SubscriptionExpired' | 'CronTriggered';\n  }): Promise<ReactiveEvent[]> {\n    if (!this.reactiveProvider) {\n      throw new Error('Reactive provider not configured');\n    }\n    \n    const events: ReactiveEvent[] = [];\n    const eventNames = params?.eventType \n      ? [params.eventType]\n      : ['PaymentProcessed', 'SubscriptionExpired', 'CronTriggered'];\n    \n    for (const eventName of eventNames) {\n      const logs = await this.reactiveProvider.getContractEvents({\n        address: CONTRACT_ADDRESSES.reactive.subscriptionReactive,\n        abi: subscriptionReactiveABI,\n        eventName: eventName as any,\n        fromBlock: params?.fromBlock || 'earliest',\n        toBlock: params?.toBlock || 'latest'\n      });\n      \n      for (const log of logs) {\n        const block = await this.reactiveProvider.getBlock({\n          blockNumber: log.blockNumber!\n        });\n        \n        events.push({\n          blockNumber: log.blockNumber!,\n          timestamp: block.timestamp,\n          eventType: eventName as any,\n          data: log.args\n        });\n      }\n    }\n    \n    return events.sort((a, b) => Number(a.blockNumber - b.blockNumber));\n  }\n\n  /**\n   * Estimate gas for reactive operations\n   */\n  async estimateReactiveGas(operation: 'subscribe' | 'cancel' | 'process'): Promise<bigint> {\n    // Reactive Network gas estimates (in REACT tokens)\n    const estimates = {\n      subscribe: parseEther('0.01'),\n      cancel: parseEther('0.005'),\n      process: parseEther('0.02')\n    };\n    \n    return estimates[operation];\n  }\n\n  /**\n   * Get reactive network status\n   */\n  async getNetworkStatus(): Promise<{\n    chainId: number;\n    blockNumber: bigint;\n    gasPrice: bigint;\n    isConnected: boolean;\n  }> {\n    if (!this.reactiveProvider) {\n      return {\n        chainId: 0,\n        blockNumber: 0n,\n        gasPrice: 0n,\n        isConnected: false\n      };\n    }\n    \n    try {\n      const [chainId, block, gasPrice] = await Promise.all([\n        this.reactiveProvider.getChainId(),\n        this.reactiveProvider.getBlockNumber(),\n        this.reactiveProvider.getGasPrice()\n      ]);\n      \n      return {\n        chainId,\n        blockNumber: block,\n        gasPrice,\n        isConnected: true\n      };\n    } catch {\n      return {\n        chainId: 0,\n        blockNumber: 0n,\n        gasPrice: 0n,\n        isConnected: false\n      };\n    }\n  }\n\n  /**\n   * Setup initial reactive subscriptions\n   */\n  async setupInitialSubscriptions(): Promise<{\n    paymentSubscription?: Hash;\n    cronSubscription?: Hash;\n  }> {\n    const results: any = {};\n    \n    try {\n      // Subscribe to payment events\n      results.paymentSubscription = await this.subscribeToPaymentEvents({});\n      \n      // Subscribe to CRON for expiry checks (every hour)\n      results.cronSubscription = await this.subscribeToCronJob({\n        interval: 3600n // 1 hour\n      });\n    } catch (error) {\n      console.error('Error setting up subscriptions:', error);\n    }\n    \n    return results;\n  }\n\n  /**\n   * Get contract instance\n   */\n  private getContract() {\n    const provider = this.reactiveProvider || this.publicClient;\n    \n    return {\n      read: {\n        getDebt: () =>\n          provider.readContract({\n            address: CONTRACT_ADDRESSES.reactive.subscriptionReactive,\n            abi: subscriptionReactiveABI,\n            functionName: 'getDebt'\n          }),\n        getTrackedExpiration: (user: Address, merchantId: bigint) =>\n          provider.readContract({\n            address: CONTRACT_ADDRESSES.reactive.subscriptionReactive,\n            abi: subscriptionReactiveABI,\n            functionName: 'getTrackedExpiration',\n            args: [user, merchantId]\n          }),\n        getExpiringSubscriptions: (beforeTimestamp: bigint, limit: bigint) =>\n          provider.readContract({\n            address: CONTRACT_ADDRESSES.reactive.subscriptionReactive,\n            abi: subscriptionReactiveABI,\n            functionName: 'getExpiringSubscriptions',\n            args: [beforeTimestamp, limit]\n          })\n      },\n      write: {\n        subscribeToPaymentEvents: (chainId: bigint, contractAddress: Address) =>\n          this.walletClient!.writeContract({\n            address: CONTRACT_ADDRESSES.reactive.subscriptionReactive,\n            abi: subscriptionReactiveABI,\n            functionName: 'subscribeToPaymentEvents',\n            args: [chainId, contractAddress],\n            account: this.walletClient!.account!,\n            chain: undefined\n          }),\n        subscribeToCron: (interval: bigint) =>\n          this.walletClient!.writeContract({\n            address: CONTRACT_ADDRESSES.reactive.subscriptionReactive,\n            abi: subscriptionReactiveABI,\n            functionName: 'subscribeToCron',\n            args: [interval],\n            account: this.walletClient!.account!,\n            chain: undefined\n          }),\n        pause: () =>\n          this.walletClient!.writeContract({\n            address: CONTRACT_ADDRESSES.reactive.subscriptionReactive,\n            abi: subscriptionReactiveABI,\n            functionName: 'pause',\n            account: this.walletClient!.account!,\n            chain: undefined\n          }),\n        resume: () =>\n          this.walletClient!.writeContract({\n            address: CONTRACT_ADDRESSES.reactive.subscriptionReactive,\n            abi: subscriptionReactiveABI,\n            functionName: 'resume',\n            account: this.walletClient!.account!,\n            chain: undefined\n          }),\n        updateSubscriptionState: (user: Address, merchantId: bigint, expiresAt: bigint) =>\n          this.walletClient!.writeContract({\n            address: CONTRACT_ADDRESSES.reactive.subscriptionReactive,\n            abi: subscriptionReactiveABI,\n            functionName: 'updateSubscriptionState',\n            args: [user, merchantId, expiresAt],\n            account: this.walletClient!.account!,\n            chain: undefined\n          }),\n        depositForOperations: (value: bigint) =>\n          this.walletClient!.writeContract({\n            address: CONTRACT_ADDRESSES.reactive.subscriptionReactive,\n            abi: subscriptionReactiveABI,\n            functionName: 'depositForOperations',\n            value,\n            account: this.walletClient!.account!,\n            chain: undefined\n          }),\n        coverDebt: () =>\n          this.walletClient!.writeContract({\n            address: CONTRACT_ADDRESSES.reactive.subscriptionReactive,\n            abi: subscriptionReactiveABI,\n            functionName: 'coverDebt',\n            account: this.walletClient!.account!,\n            chain: undefined\n          }),\n        emergencyWithdraw: () =>\n          this.walletClient!.writeContract({\n            address: CONTRACT_ADDRESSES.reactive.subscriptionReactive,\n            abi: subscriptionReactiveABI,\n            functionName: 'emergencyWithdraw',\n            account: this.walletClient!.account!,\n            chain: undefined\n          })\n      }\n    };\n  }\n\n  /**\n   * Calculate subscription costs\n   */\n  calculateSubscriptionCost(params: {\n    duration: 'hour' | 'day' | 'week' | 'month';\n    eventType: 'payment' | 'cron';\n  }): bigint {\n    // Base costs in REACT\n    const baseCosts = {\n      payment: parseEther('0.01'),\n      cron: parseEther('0.05')\n    };\n    \n    // Duration multipliers\n    const multipliers = {\n      hour: 1,\n      day: 20,\n      week: 100,\n      month: 300\n    };\n    \n    const baseCost = baseCosts[params.eventType];\n    const multiplier = multipliers[params.duration];\n    \n    return (baseCost * BigInt(multiplier)) / 100n;\n  }\n}","import { \n  type Address, \n  type Hash, \n  type PublicClient, \n  type WalletClient,\n  type Chain\n} from 'viem';\n\n// Core SDK Types\nexport interface SDKConfig {\n  chain: 'sepolia' | 'mainnet' | 'polygon' | 'base' | string;\n  walletClient?: WalletClient;\n  publicClient?: PublicClient;\n  privateKey?: string;\n  rpc?: string;\n  readOnly?: boolean;\n}\n\n// Subscription Types\nexport interface SubscriptionStatus {\n  isActive: boolean;\n  expiresAt: bigint;\n  renewalCount: bigint;\n  lastRenewal: bigint;\n  merchantId: bigint;\n}\n\nexport interface SubscribeParams {\n  merchantId: bigint;\n  paymentToken: Address | 'ETH';\n  autoApprove?: boolean;\n}\n\nexport interface SubscribeResult {\n  hash: Hash;\n  approvalHash?: Hash;\n}\n\n// Merchant Types\nexport interface Merchant {\n  id: bigint;\n  owner: Address;\n  payoutAddress: Address;\n  subscriptionPeriod: bigint;\n  gracePeriod: bigint;\n  isActive: boolean;\n}\n\nexport interface MerchantRegistrationParams {\n  payoutAddress: Address;\n  subscriptionPeriod: bigint;\n  gracePeriod: bigint;\n}\n\nexport interface MerchantPriceParams {\n  merchantId: bigint;\n  token: Address | 'ETH';\n  price: bigint;\n}\n\n// Token Types\nexport interface Token {\n  address: Address;\n  symbol: string;\n  name: string;\n  decimals: number;\n  isNative?: boolean;\n}\n\nexport interface TokenBalance {\n  token: Token;\n  balance: bigint;\n  formattedBalance: string;\n}\n\n// Event Types\nexport type EventCallback<T = any> = (data: T) => void | Promise<void>;\n\nexport interface EventListeners {\n  onPaymentReceived?: EventCallback<PaymentEvent>;\n  onSubscriptionMinted?: EventCallback<SubscriptionMintedEvent>;\n  onSubscriptionRenewed?: EventCallback<SubscriptionRenewedEvent>;\n  onSubscriptionExpired?: EventCallback<SubscriptionExpiredEvent>;\n  onMerchantRegistered?: EventCallback<MerchantRegisteredEvent>;\n  onMerchantWithdrawal?: EventCallback<MerchantWithdrawalEvent>;\n}\n\nexport interface PaymentEvent {\n  subscriber: Address;\n  merchantId: bigint;\n  paymentToken: Address;\n  amount: bigint;\n  platformFee: bigint;\n  subscriptionPeriod: bigint;\n  blockNumber: bigint;\n  transactionHash: Hash;\n}\n\nexport interface SubscriptionMintedEvent {\n  subscriber: Address;\n  merchantId: bigint;\n  expiresAt: bigint;\n  blockNumber: bigint;\n  transactionHash: Hash;\n}\n\nexport interface SubscriptionRenewedEvent {\n  subscriber: Address;\n  merchantId: bigint;\n  newExpiresAt: bigint;\n  renewalCount: bigint;\n  blockNumber: bigint;\n  transactionHash: Hash;\n}\n\nexport interface SubscriptionExpiredEvent {\n  subscriber: Address;\n  merchantId: bigint;\n  blockNumber: bigint;\n  transactionHash: Hash;\n}\n\nexport interface MerchantRegisteredEvent {\n  merchantId: bigint;\n  owner: Address;\n  payoutAddress: Address;\n  blockNumber: bigint;\n  transactionHash: Hash;\n}\n\nexport interface MerchantWithdrawalEvent {\n  merchantId: bigint;\n  token: Address;\n  amount: bigint;\n  payoutAddress: Address;\n  blockNumber: bigint;\n  transactionHash: Hash;\n}\n\n// Analytics Types\nexport interface PlatformMetrics {\n  totalMerchants: number;\n  activeMerchants: number;\n  totalSubscribers: number;\n  activeSubscriptions: number;\n  totalVolume: bigint;\n  totalPlatformFees: bigint;\n  averageSubscriptionPrice: bigint;\n  totalRenewals: number;\n}\n\nexport interface MerchantAnalytics {\n  merchantId: bigint;\n  totalRevenue: bigint;\n  totalSubscribers: number;\n  activeSubscribers: number;\n  averageSubscriptionValue: bigint;\n  churnRate: number;\n  renewalRate: number;\n}\n\n// NFT Types\nexport interface NFTMetadata {\n  tokenId: bigint;\n  merchantId: bigint;\n  subscriber: Address;\n  expiresAt: bigint;\n  renewalCount: bigint;\n  uri: string;\n}\n\n// Error Types\nexport enum SDKErrorCode {\n  WALLET_NOT_CONNECTED = 'WALLET_NOT_CONNECTED',\n  INSUFFICIENT_BALANCE = 'INSUFFICIENT_BALANCE',\n  APPROVAL_NEEDED = 'APPROVAL_NEEDED',\n  SUBSCRIPTION_EXISTS = 'SUBSCRIPTION_EXISTS',\n  MERCHANT_NOT_FOUND = 'MERCHANT_NOT_FOUND',\n  INVALID_CHAIN = 'INVALID_CHAIN',\n  TRANSACTION_FAILED = 'TRANSACTION_FAILED',\n  NETWORK_ERROR = 'NETWORK_ERROR'\n}\n\nexport class SDKError extends Error {\n  constructor(\n    public code: SDKErrorCode,\n    message: string,\n    public details?: any\n  ) {\n    super(message);\n    this.name = 'SDKError';\n  }\n}","import { type Address } from 'viem';\n\nexport interface ChainConfig {\n  chainId: number;\n  name: string;\n  rpc: string;\n  explorer: string;\n  contracts: {\n    subscriptionManager: Address;\n    subscriptionNFT: Address;\n    testToken?: Address;\n  };\n  reactive?: {\n    chainId: number;\n    rpc: string;\n    contract: Address;\n  };\n}\n\nexport const CHAIN_CONFIGS: Record<string, ChainConfig> = {\n  sepolia: {\n    chainId: 11155111,\n    name: 'Sepolia',\n    rpc: 'https://sepolia.gateway.tenderly.co',\n    explorer: 'https://sepolia.etherscan.io',\n    contracts: {\n      subscriptionManager: '0x82b069578ae3dA9ea740D24934334208b83E530E',\n      subscriptionNFT: '0x404cb817FA393D3689D1405DB0B76a20eDE72d43',\n      testToken: '0x10586EBF2Ce1F3e851a8F15659cBa15b03Eb8B8A'\n    },\n    reactive: {\n      chainId: 12553,\n      rpc: 'https://lasna-rpc.rnk.dev/',\n      contract: '0xa55B7A74D05b5D5C48E431e44Fea83a1047A7582'\n    }\n  }\n};\n\nexport function getChainConfig(chain: string): ChainConfig {\n  const config = CHAIN_CONFIGS[chain];\n  if (!config) {\n    throw new Error(`Unsupported chain: ${chain}. Supported chains: ${Object.keys(CHAIN_CONFIGS).join(', ')}`);\n  }\n  return config;\n}\n\nexport function getExplorerUrl(chain: string, hash: string): string {\n  const config = getChainConfig(chain);\n  return `${config.explorer}/tx/${hash}`;\n}\n\nexport function getAddressExplorerUrl(chain: string, address: string): string {\n  const config = getChainConfig(chain);\n  return `${config.explorer}/address/${address}`;\n}","import {\n  createPublicClient,\n  createWalletClient,\n  http,\n  type PublicClient,\n  type WalletClient,\n  type Hash,\n  type Address,\n  zeroAddress,\n  custom\n} from 'viem';\nimport { privateKeyToAccount } from 'viem/accounts';\nimport EventEmitter from 'events';\n\n// Import our services\nimport { MerchantService } from '@/services/MerchantService';\nimport { SubscriptionService } from '@/services/SubscriptionService';\nimport { TokenService } from '@/services/TokenService';\nimport { NFTService } from '@/services/NFTService';\nimport { EventMonitoringService } from '@/services/EventMonitoringService';\nimport { AnalyticsService } from '@/services/AnalyticsService';\nimport { AdminService } from '@/services/AdminService';\nimport { ReactiveNetworkService } from '@/services/ReactiveNetworkService';\n\n// Import SDK types and config\nimport { \n  type SDKConfig,\n  type SubscribeParams,\n  type SubscribeResult,\n  type EventListeners,\n  SDKError,\n  SDKErrorCode\n} from '../types';\nimport { getChainConfig, type ChainConfig } from '../config/chains';\n\n/**\n * Main SDK class for subscription NFT platform\n * Wraps all services and provides simplified API for developers\n */\nexport class SubscriptionSDK extends EventEmitter {\n  // Core clients\n  public publicClient: PublicClient;\n  public walletClient?: WalletClient;\n  \n  // Chain configuration\n  public chainConfig: ChainConfig;\n  \n  // Services\n  public merchants: MerchantService;\n  public subscriptions: SubscriptionService;\n  public tokens: TokenService;\n  public nfts: NFTService;\n  public events: EventMonitoringService;\n  public analytics: AnalyticsService;\n  public admin: AdminService;\n  public reactive: ReactiveNetworkService;\n  \n  // Event monitoring\n  private eventListeners: Map<string, string> = new Map();\n  \n  constructor(config: SDKConfig) {\n    super();\n    \n    // Get chain configuration\n    this.chainConfig = getChainConfig(config.chain);\n    \n    // Initialize clients\n    this.publicClient = this.initPublicClient(config);\n    this.walletClient = this.initWalletClient(config);\n    \n    // Initialize services\n    this.merchants = new MerchantService(this.publicClient, this.walletClient);\n    this.subscriptions = new SubscriptionService(this.publicClient, this.walletClient);\n    this.tokens = new TokenService(this.publicClient, this.walletClient);\n    this.nfts = new NFTService(this.publicClient, this.walletClient);\n    this.events = new EventMonitoringService(this.publicClient);\n    this.analytics = new AnalyticsService(this.publicClient);\n    this.admin = new AdminService(this.publicClient, this.walletClient);\n    \n    // Initialize reactive service if configured\n    if (this.chainConfig.reactive) {\n      const reactivePublicClient = createPublicClient({\n        transport: http(this.chainConfig.reactive.rpc)\n      });\n      this.reactive = new ReactiveNetworkService(\n        this.publicClient, \n        this.walletClient,\n        reactivePublicClient\n      );\n    } else {\n      this.reactive = new ReactiveNetworkService(\n        this.publicClient,\n        this.walletClient\n      );\n    }\n  }\n  \n  /**\n   * Initialize public client for reading blockchain data\n   */\n  private initPublicClient(config: SDKConfig): PublicClient {\n    // Use provided client if available\n    if (config.publicClient) {\n      return config.publicClient;\n    }\n    \n    // Create new public client\n    const rpc = config.rpc || this.chainConfig.rpc;\n    return createPublicClient({\n      transport: http(rpc)\n    });\n  }\n  \n  /**\n   * Initialize wallet client for transactions\n   */\n  private initWalletClient(config: SDKConfig): WalletClient | undefined {\n    // Use provided wallet client\n    if (config.walletClient) {\n      return config.walletClient;\n    }\n    \n    // Create from private key\n    if (config.privateKey) {\n      const account = privateKeyToAccount(config.privateKey as `0x${string}`);\n      const rpc = config.rpc || this.chainConfig.rpc;\n      \n      return createWalletClient({\n        account,\n        transport: http(rpc)\n      });\n    }\n    \n    // Read-only mode\n    if (config.readOnly) {\n      return undefined;\n    }\n    \n    // Check for browser wallet\n    if (typeof window !== 'undefined' && (window as any).ethereum) {\n      return createWalletClient({\n        transport: custom((window as any).ethereum)\n      });\n    }\n    \n    return undefined;\n  }\n  \n  // ============ Quick Actions ============\n  \n  /**\n   * Subscribe to a merchant (simplified)\n   */\n  async subscribe(\n    merchantId: bigint,\n    paymentToken: Address | 'ETH' = 'ETH'\n  ): Promise<Hash> {\n    if (!this.walletClient) {\n      throw new SDKError(\n        SDKErrorCode.WALLET_NOT_CONNECTED,\n        'Wallet not connected. Initialize SDK with wallet client or private key.'\n      );\n    }\n    \n    const tokenAddress = paymentToken === 'ETH' ? zeroAddress : paymentToken;\n    \n    // Handle approval if needed\n    if (tokenAddress !== zeroAddress) {\n      const approvalResult = await this.tokens.approveIfNeeded({\n        tokenAddress,\n        spender: this.chainConfig.contracts.subscriptionManager,\n        amount: await this.subscriptions.getSubscriptionPrice(merchantId, tokenAddress)\n      });\n      \n      if (approvalResult.needed && approvalResult.hash) {\n        // Wait for approval\n        await this.publicClient.waitForTransactionReceipt({\n          hash: approvalResult.hash\n        });\n      }\n    }\n    \n    // Subscribe\n    return await this.subscriptions.subscribe({\n      merchantId,\n      paymentToken: tokenAddress\n    });\n  }\n  \n  /**\n   * Check if user has active subscription\n   */\n  async checkAccess(merchantId: bigint, userAddress?: Address): Promise<boolean> {\n    const address = userAddress || this.walletClient?.account?.address;\n    if (!address) {\n      throw new SDKError(\n        SDKErrorCode.WALLET_NOT_CONNECTED,\n        'No address provided and wallet not connected'\n      );\n    }\n    \n    return await this.subscriptions.isSubscriptionActive(address, merchantId);\n  }\n  \n  /**\n   * Get merchant balance\n   */\n  async getMerchantBalance(\n    merchantId: bigint, \n    token: Address | 'ETH' = 'ETH'\n  ): Promise<bigint> {\n    const tokenAddress = token === 'ETH' ? zeroAddress : token;\n    return await this.merchants.getMerchantBalance(merchantId, tokenAddress);\n  }\n  \n  /**\n   * Withdraw merchant earnings\n   */\n  async withdrawMerchantBalance(\n    merchantId: bigint,\n    token: Address | 'ETH' = 'ETH'\n  ): Promise<Hash> {\n    if (!this.walletClient) {\n      throw new SDKError(\n        SDKErrorCode.WALLET_NOT_CONNECTED,\n        'Wallet not connected'\n      );\n    }\n    \n    const tokenAddress = token === 'ETH' ? zeroAddress : token;\n    return await this.merchants.withdrawMerchantBalance({\n      merchantId,\n      token: tokenAddress\n    });\n  }\n  \n  // ============ Event Monitoring ============\n  \n  /**\n   * Start monitoring events with callbacks\n   */\n  startEventMonitoring(listeners: EventListeners): void {\n    // Payment events\n    if (listeners.onPaymentReceived) {\n      const id = this.events.monitorPaymentEvents({\n        onEvent: (event, log) => {\n          listeners.onPaymentReceived!(event);\n          this.emit('payment:received', event);\n        }\n      });\n      this.eventListeners.set('payment', id);\n    }\n    \n    // Subscription lifecycle\n    if (listeners.onSubscriptionMinted || listeners.onSubscriptionRenewed) {\n      const id = this.events.monitorSubscriptionLifecycle({\n        onMinted: listeners.onSubscriptionMinted ? \n          (event, log) => {\n            listeners.onSubscriptionMinted!(event);\n            this.emit('subscription:minted', event);\n          } : undefined,\n        onRenewed: listeners.onSubscriptionRenewed ?\n          (event, log) => {\n            listeners.onSubscriptionRenewed!(event);\n            this.emit('subscription:renewed', event);\n          } : undefined\n      });\n      this.eventListeners.set('lifecycle', id);\n    }\n    \n    // Merchant events\n    if (listeners.onMerchantRegistered || listeners.onMerchantWithdrawal) {\n      const id = this.events.monitorMerchantEvents({\n        onRegistered: listeners.onMerchantRegistered ?\n          (event, log) => {\n            listeners.onMerchantRegistered!(event);\n            this.emit('merchant:registered', event);\n          } : undefined,\n        onWithdrawal: listeners.onMerchantWithdrawal ?\n          (event, log) => {\n            listeners.onMerchantWithdrawal!(event);\n            this.emit('merchant:withdrawal', event);\n          } : undefined\n      });\n      this.eventListeners.set('merchant', id);\n    }\n  }\n  \n  /**\n   * Stop all event monitoring\n   */\n  stopEventMonitoring(): void {\n    this.eventListeners.forEach(monitorId => {\n      this.events.stopMonitoring(monitorId);\n    });\n    this.eventListeners.clear();\n    this.removeAllListeners();\n  }\n  \n  // ============ Utility Methods ============\n  \n  /**\n   * Get connected wallet address\n   */\n  getAddress(): Address | undefined {\n    return this.walletClient?.account?.address;\n  }\n  \n  /**\n   * Check if wallet is connected\n   */\n  isConnected(): boolean {\n    return !!this.walletClient;\n  }\n  \n  /**\n   * Get chain ID\n   */\n  getChainId(): number {\n    return this.chainConfig.chainId;\n  }\n  \n  /**\n   * Get contract addresses\n   */\n  getContracts() {\n    return this.chainConfig.contracts;\n  }\n  \n  /**\n   * Wait for transaction confirmation\n   */\n  async waitForTransaction(hash: Hash) {\n    return await this.publicClient.waitForTransactionReceipt({ hash });\n  }\n  \n  /**\n   * Format token amount for display\n   */\n  formatAmount(amount: bigint, decimals: number = 18): string {\n    return this.tokens.formatTokenAmount(amount, decimals);\n  }\n  \n  /**\n   * Parse token amount from string\n   */\n  parseAmount(amount: string, decimals: number = 18): bigint {\n    return this.tokens.parseTokenAmount(amount, decimals);\n  }\n}","import { useState, useEffect, useRef } from 'react';\nimport { SubscriptionSDK } from '../core/SubscriptionSDK';\nimport { type SDKConfig } from '../types';\n\nexport function useSubscriptionSDK(config: SDKConfig) {\n  const [sdk, setSdk] = useState<SubscriptionSDK | null>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const sdkRef = useRef<SubscriptionSDK | null>(null);\n\n  useEffect(() => {\n    const initSDK = async () => {\n      try {\n        setError(null);\n        \n        // Create SDK instance\n        const instance = new SubscriptionSDK(config);\n        sdkRef.current = instance;\n        setSdk(instance);\n        setIsInitialized(true);\n      } catch (err) {\n        setError(err as Error);\n        setIsInitialized(false);\n      }\n    };\n\n    initSDK();\n\n    // Cleanup\n    return () => {\n      if (sdkRef.current) {\n        sdkRef.current.stopEventMonitoring();\n        sdkRef.current = null;\n      }\n    };\n  }, [config.chain, config.rpc, config.privateKey]);\n\n  return {\n    sdk,\n    isInitialized,\n    error,\n    isConnected: sdk?.isConnected() ?? false,\n    address: sdk?.getAddress()\n  };\n}","import { useState, useEffect, useCallback } from 'react';\nimport { type Address, type Hash } from 'viem';\nimport { type SubscriptionSDK, type SubscriptionStatus } from '../';\n\nexport function useSubscription(\n  sdk: SubscriptionSDK | null,\n  merchantId: bigint,\n  userAddress?: Address\n) {\n  const [isActive, setIsActive] = useState(false);\n  const [status, setStatus] = useState<SubscriptionStatus | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  // Check subscription status\n  const checkStatus = useCallback(async () => {\n    if (!sdk) return;\n    \n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const address = userAddress || sdk.getAddress();\n      if (!address) throw new Error('No address available');\n      \n      const active = await sdk.checkAccess(merchantId, address);\n      setIsActive(active);\n      \n      // Get full status if active\n      if (active) {\n        const fullStatus = await sdk.subscriptions.getSubscriptionStatus(\n          address,\n          merchantId\n        );\n        setStatus(fullStatus);\n      }\n    } catch (err) {\n      setError(err as Error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk, merchantId, userAddress]);\n\n  // Subscribe function\n  const subscribe = useCallback(\n    async (paymentToken: Address | 'ETH' = 'ETH'): Promise<Hash | undefined> => {\n      if (!sdk) {\n        setError(new Error('SDK not initialized'));\n        return;\n      }\n      \n      setIsLoading(true);\n      setError(null);\n      \n      try {\n        const hash = await sdk.subscribe(merchantId, paymentToken);\n        \n        // Wait for transaction\n        await sdk.waitForTransaction(hash);\n        \n        // Refresh status\n        await checkStatus();\n        \n        return hash;\n      } catch (err) {\n        setError(err as Error);\n        return undefined;\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [sdk, merchantId, checkStatus]\n  );\n\n  // Auto-check status on mount and when dependencies change\n  useEffect(() => {\n    checkStatus();\n  }, [checkStatus]);\n\n  // Set up event monitoring for subscription changes\n  useEffect(() => {\n    if (!sdk || !userAddress) return;\n    \n    const listener = (event: any) => {\n      if (\n        event.subscriber === userAddress &&\n        event.merchantId === merchantId\n      ) {\n        checkStatus();\n      }\n    };\n\n    sdk.on('subscription:minted', listener);\n    \n    return () => {\n      sdk.off('subscription:minted', listener);\n    };\n  }, [sdk, userAddress, merchantId, checkStatus]);\n\n  return {\n    isActive,\n    status,\n    isLoading,\n    error,\n    subscribe,\n    checkStatus\n  };\n}","import { useState, useEffect, useCallback } from 'react';\nimport { type Address, type Hash } from 'viem';\nimport { type SubscriptionSDK, type MerchantPlan } from '../';\n\nexport function useMerchant(\n  sdk: SubscriptionSDK | null,\n  merchantId: bigint\n) {\n  const [merchant, setMerchant] = useState<MerchantPlan | null>(null);\n  const [balance, setBalance] = useState<bigint>(0n);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  // Fetch merchant details\n  const fetchMerchantDetails = useCallback(async () => {\n    if (!sdk) return;\n    \n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const details = await sdk.merchants.getMerchantPlan(merchantId);\n      setMerchant(details);\n      \n      // Get balance in ETH\n      const bal = await sdk.getMerchantBalance(merchantId, 'ETH');\n      setBalance(bal);\n    } catch (err) {\n      setError(err as Error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk, merchantId]);\n\n  // Withdraw balance\n  const withdraw = useCallback(\n    async (token: Address | 'ETH' = 'ETH'): Promise<Hash | undefined> => {\n      if (!sdk) {\n        setError(new Error('SDK not initialized'));\n        return;\n      }\n      \n      setIsLoading(true);\n      setError(null);\n      \n      try {\n        const hash = await sdk.withdrawMerchantBalance(merchantId, token);\n        \n        // Wait for transaction\n        await sdk.waitForTransaction(hash);\n        \n        // Refresh details\n        await fetchMerchantDetails();\n        \n        return hash;\n      } catch (err) {\n        setError(err as Error);\n        return undefined;\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [sdk, merchantId, fetchMerchantDetails]\n  );\n\n  // Set price for a token\n  const setPrice = useCallback(\n    async (token: Address | 'ETH', price: string): Promise<Hash | undefined> => {\n      if (!sdk) {\n        setError(new Error('SDK not initialized'));\n        return;\n      }\n      \n      setIsLoading(true);\n      setError(null);\n      \n      try {\n        const tokenAddress = token === 'ETH' ? \n          '0x0000000000000000000000000000000000000000' as Address : \n          token;\n          \n        const hash = await sdk.merchants.setMerchantPrice({\n          merchantId,\n          paymentToken: tokenAddress,\n          price\n        });\n        \n        await sdk.waitForTransaction(hash);\n        \n        return hash;\n      } catch (err) {\n        setError(err as Error);\n        return undefined;\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [sdk, merchantId]\n  );\n\n  // Auto-fetch on mount\n  useEffect(() => {\n    fetchMerchantDetails();\n  }, [fetchMerchantDetails]);\n\n  // Monitor withdrawal events\n  useEffect(() => {\n    if (!sdk || !merchant) return;\n    \n    const listener = (event: any) => {\n      if (event.merchantId === merchantId) {\n        fetchMerchantDetails();\n      }\n    };\n\n    sdk.on('merchant:withdrawal', listener);\n    \n    return () => {\n      sdk.off('merchant:withdrawal', listener);\n    };\n  }, [sdk, merchant, merchantId, fetchMerchantDetails]);\n\n  return {\n    merchant,\n    balance,\n    isLoading,\n    error,\n    withdraw,\n    setPrice,\n    refresh: fetchMerchantDetails\n  };\n}","import { useEffect, useState } from 'react';\nimport { type SubscriptionSDK, type EventListeners } from '../';\n\nexport function useSubscriptionEvents(\n  sdk: SubscriptionSDK | null,\n  listeners: EventListeners\n) {\n  const [isMonitoring, setIsMonitoring] = useState(false);\n  const [events, setEvents] = useState<any[]>([]);\n\n  useEffect(() => {\n    if (!sdk) return;\n    \n    // Start monitoring\n    sdk.startEventMonitoring({\n      ...listeners,\n      // Wrap callbacks to collect events\n      onPaymentReceived: listeners.onPaymentReceived\n        ? (event) => {\n            setEvents(prev => [...prev, { type: 'payment', data: event, timestamp: Date.now() }]);\n            listeners.onPaymentReceived!(event);\n          }\n        : undefined,\n      onSubscriptionMinted: listeners.onSubscriptionMinted\n        ? (event) => {\n            setEvents(prev => [...prev, { type: 'minted', data: event, timestamp: Date.now() }]);\n            listeners.onSubscriptionMinted!(event);\n          }\n        : undefined,\n      onSubscriptionRenewed: listeners.onSubscriptionRenewed\n        ? (event) => {\n            setEvents(prev => [...prev, { type: 'renewed', data: event, timestamp: Date.now() }]);\n            listeners.onSubscriptionRenewed!(event);\n          }\n        : undefined,\n      onMerchantRegistered: listeners.onMerchantRegistered\n        ? (event) => {\n            setEvents(prev => [...prev, { type: 'merchant:registered', data: event, timestamp: Date.now() }]);\n            listeners.onMerchantRegistered!(event);\n          }\n        : undefined,\n      onMerchantWithdrawal: listeners.onMerchantWithdrawal\n        ? (event) => {\n            setEvents(prev => [...prev, { type: 'merchant:withdrawal', data: event, timestamp: Date.now() }]);\n            listeners.onMerchantWithdrawal!(event);\n          }\n        : undefined\n    });\n    \n    setIsMonitoring(true);\n    \n    // Cleanup\n    return () => {\n      sdk.stopEventMonitoring();\n      setIsMonitoring(false);\n    };\n  }, [sdk]);\n\n  const clearEvents = () => setEvents([]);\n\n  return {\n    isMonitoring,\n    events,\n    clearEvents\n  };\n}"]}